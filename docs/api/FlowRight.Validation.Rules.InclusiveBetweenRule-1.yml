### YamlMime:ManagedReference
items:
- uid: FlowRight.Validation.Rules.InclusiveBetweenRule`1
  commentId: T:FlowRight.Validation.Rules.InclusiveBetweenRule`1
  id: InclusiveBetweenRule`1
  parent: FlowRight.Validation.Rules
  children:
  - FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor(`0,`0)
  - FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate(`0,System.String)
  langs:
  - csharp
  - vb
  name: InclusiveBetweenRule<TNumeric>
  nameWithType: InclusiveBetweenRule<TNumeric>
  fullName: FlowRight.Validation.Rules.InclusiveBetweenRule<TNumeric>
  type: Class
  source:
    id: InclusiveBetweenRule
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Rules/InclusiveBetweenRule.cs
    startLine: 38
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Rules
  summary: A validation rule that ensures a numeric value is between two bounds (inclusive).
  example: []
  syntax:
    content: 'public sealed class InclusiveBetweenRule<TNumeric> : IRule<TNumeric> where TNumeric : struct, INumber<TNumeric>'
    typeParameters:
    - id: TNumeric
      description: The numeric type being validated (int, long, decimal, double, float, short, etc.).
    content.vb: Public NotInheritable Class InclusiveBetweenRule(Of TNumeric As {Structure, INumber(Of TNumeric)}) Implements IRule(Of TNumeric)
  inheritance:
  - System.Object
  implements:
  - FlowRight.Validation.Rules.IRule{{TNumeric}}
  nameWithType.vb: InclusiveBetweenRule(Of TNumeric)
  fullName.vb: FlowRight.Validation.Rules.InclusiveBetweenRule(Of TNumeric)
  name.vb: InclusiveBetweenRule(Of TNumeric)
- uid: FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor(`0,`0)
  commentId: M:FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor(`0,`0)
  id: '#ctor(`0,`0)'
  parent: FlowRight.Validation.Rules.InclusiveBetweenRule`1
  langs:
  - csharp
  - vb
  name: InclusiveBetweenRule(TNumeric, TNumeric)
  nameWithType: InclusiveBetweenRule<TNumeric>.InclusiveBetweenRule(TNumeric, TNumeric)
  fullName: FlowRight.Validation.Rules.InclusiveBetweenRule<TNumeric>.InclusiveBetweenRule(TNumeric, TNumeric)
  type: Constructor
  source:
    id: .ctor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Rules/InclusiveBetweenRule.cs
    startLine: 38
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Rules
  summary: A validation rule that ensures a numeric value is between two bounds (inclusive).
  example: []
  syntax:
    content: public InclusiveBetweenRule(TNumeric from, TNumeric to)
    parameters:
    - id: from
      type: '{TNumeric}'
      description: The lower bound (inclusive).
    - id: to
      type: '{TNumeric}'
      description: The upper bound (inclusive).
    content.vb: Public Sub New(from As TNumeric, [to] As TNumeric)
  overload: FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor*
  nameWithType.vb: InclusiveBetweenRule(Of TNumeric).New(TNumeric, TNumeric)
  fullName.vb: FlowRight.Validation.Rules.InclusiveBetweenRule(Of TNumeric).New(TNumeric, TNumeric)
  name.vb: New(TNumeric, TNumeric)
- uid: FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate(`0,System.String)
  commentId: M:FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate(`0,System.String)
  id: Validate(`0,System.String)
  parent: FlowRight.Validation.Rules.InclusiveBetweenRule`1
  langs:
  - csharp
  - vb
  name: Validate(TNumeric, string)
  nameWithType: InclusiveBetweenRule<TNumeric>.Validate(TNumeric, string)
  fullName: FlowRight.Validation.Rules.InclusiveBetweenRule<TNumeric>.Validate(TNumeric, string)
  type: Method
  source:
    id: Validate
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Rules/InclusiveBetweenRule.cs
    startLine: 68
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Rules
  summary: Validates that the numeric value is between the bounds (inclusive).
  example:
  - >-
    <pre><code class="lang-csharp">// Integer validation

    InclusiveBetweenRule&lt;int&gt; intRule = new(1, 10);

    string? error = intRule.Validate(5, "Age"); // Returns null (valid)

    string? error2 = intRule.Validate(15, "Age"); // Returns error message


    // Decimal validation

    InclusiveBetweenRule&lt;decimal&gt; decimalRule = new(0.0m, 100.0m);

    string? error3 = decimalRule.Validate(50.5m, "Percentage"); // Returns null (valid)</code></pre>
  syntax:
    content: public string? Validate(TNumeric value, string displayName)
    parameters:
    - id: value
      type: '{TNumeric}'
      description: The numeric value to validate.
    - id: displayName
      type: System.String
      description: The display name for the property being validated.
    return:
      type: System.String
      description: An error message if the value is not between the bounds; otherwise, null.
    content.vb: Public Function Validate(value As TNumeric, displayName As String) As String
  overload: FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate*
  implements:
  - FlowRight.Validation.Rules.IRule{{TNumeric}}.Validate({TNumeric},System.String)
  nameWithType.vb: InclusiveBetweenRule(Of TNumeric).Validate(TNumeric, String)
  fullName.vb: FlowRight.Validation.Rules.InclusiveBetweenRule(Of TNumeric).Validate(TNumeric, String)
  name.vb: Validate(TNumeric, String)
references:
- uid: FlowRight.Validation.Rules
  commentId: N:FlowRight.Validation.Rules
  href: FlowRight.html
  name: FlowRight.Validation.Rules
  nameWithType: FlowRight.Validation.Rules
  fullName: FlowRight.Validation.Rules
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Rules
    name: Rules
    href: FlowRight.Validation.Rules.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Rules
    name: Rules
    href: FlowRight.Validation.Rules.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: FlowRight.Validation.Rules.IRule{{TNumeric}}
  commentId: T:FlowRight.Validation.Rules.IRule{`0}
  parent: FlowRight.Validation.Rules
  definition: FlowRight.Validation.Rules.IRule`1
  href: FlowRight.Validation.Rules.IRule-1.html
  name: IRule<TNumeric>
  nameWithType: IRule<TNumeric>
  fullName: FlowRight.Validation.Rules.IRule<TNumeric>
  nameWithType.vb: IRule(Of TNumeric)
  fullName.vb: FlowRight.Validation.Rules.IRule(Of TNumeric)
  name.vb: IRule(Of TNumeric)
  spec.csharp:
  - uid: FlowRight.Validation.Rules.IRule`1
    name: IRule
    href: FlowRight.Validation.Rules.IRule-1.html
  - name: <
  - name: TNumeric
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Rules.IRule`1
    name: IRule
    href: FlowRight.Validation.Rules.IRule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TNumeric
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FlowRight.Validation.Rules.IRule`1
  commentId: T:FlowRight.Validation.Rules.IRule`1
  href: FlowRight.Validation.Rules.IRule-1.html
  name: IRule<T>
  nameWithType: IRule<T>
  fullName: FlowRight.Validation.Rules.IRule<T>
  nameWithType.vb: IRule(Of T)
  fullName.vb: FlowRight.Validation.Rules.IRule(Of T)
  name.vb: IRule(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Rules.IRule`1
    name: IRule
    href: FlowRight.Validation.Rules.IRule-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Rules.IRule`1
    name: IRule
    href: FlowRight.Validation.Rules.IRule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor*
  commentId: Overload:FlowRight.Validation.Rules.InclusiveBetweenRule`1.#ctor
  href: FlowRight.Validation.Rules.InclusiveBetweenRule-1.html#FlowRight_Validation_Rules_InclusiveBetweenRule_1__ctor__0__0_
  name: InclusiveBetweenRule
  nameWithType: InclusiveBetweenRule<TNumeric>.InclusiveBetweenRule
  fullName: FlowRight.Validation.Rules.InclusiveBetweenRule<TNumeric>.InclusiveBetweenRule
  nameWithType.vb: InclusiveBetweenRule(Of TNumeric).New
  fullName.vb: FlowRight.Validation.Rules.InclusiveBetweenRule(Of TNumeric).New
  name.vb: New
- uid: '{TNumeric}'
  commentId: '!:TNumeric'
  definition: TNumeric
  name: TNumeric
  nameWithType: TNumeric
  fullName: TNumeric
- uid: TNumeric
  name: TNumeric
  nameWithType: TNumeric
  fullName: TNumeric
- uid: FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate*
  commentId: Overload:FlowRight.Validation.Rules.InclusiveBetweenRule`1.Validate
  href: FlowRight.Validation.Rules.InclusiveBetweenRule-1.html#FlowRight_Validation_Rules_InclusiveBetweenRule_1_Validate__0_System_String_
  name: Validate
  nameWithType: InclusiveBetweenRule<TNumeric>.Validate
  fullName: FlowRight.Validation.Rules.InclusiveBetweenRule<TNumeric>.Validate
  nameWithType.vb: InclusiveBetweenRule(Of TNumeric).Validate
  fullName.vb: FlowRight.Validation.Rules.InclusiveBetweenRule(Of TNumeric).Validate
- uid: FlowRight.Validation.Rules.IRule{{TNumeric}}.Validate({TNumeric},System.String)
  commentId: M:FlowRight.Validation.Rules.IRule{`0}.Validate(`0,System.String)
  parent: FlowRight.Validation.Rules.IRule{{TNumeric}}
  definition: FlowRight.Validation.Rules.IRule`1.Validate(`0,System.String)
  href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  name: Validate(TNumeric, string)
  nameWithType: IRule<TNumeric>.Validate(TNumeric, string)
  fullName: FlowRight.Validation.Rules.IRule<TNumeric>.Validate(TNumeric, string)
  nameWithType.vb: IRule(Of TNumeric).Validate(TNumeric, String)
  fullName.vb: FlowRight.Validation.Rules.IRule(Of TNumeric).Validate(TNumeric, String)
  name.vb: Validate(TNumeric, String)
  spec.csharp:
  - uid: FlowRight.Validation.Rules.IRule{`0}.Validate(`0,System.String)
    name: Validate
    href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  - name: (
  - name: TNumeric
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Validation.Rules.IRule{`0}.Validate(`0,System.String)
    name: Validate
    href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  - name: (
  - name: TNumeric
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: FlowRight.Validation.Rules.IRule`1.Validate(`0,System.String)
  commentId: M:FlowRight.Validation.Rules.IRule`1.Validate(`0,System.String)
  isExternal: true
  href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  name: Validate(T, string)
  nameWithType: IRule<T>.Validate(T, string)
  fullName: FlowRight.Validation.Rules.IRule<T>.Validate(T, string)
  nameWithType.vb: IRule(Of T).Validate(T, String)
  fullName.vb: FlowRight.Validation.Rules.IRule(Of T).Validate(T, String)
  name.vb: Validate(T, String)
  spec.csharp:
  - uid: FlowRight.Validation.Rules.IRule`1.Validate(`0,System.String)
    name: Validate
    href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Validation.Rules.IRule`1.Validate(`0,System.String)
    name: Validate
    href: FlowRight.Validation.Rules.IRule-1.html#FlowRight_Validation_Rules_IRule_1_Validate__0_System_String_
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
