### YamlMime:ManagedReference
items:
- uid: FlowRight.Validation.Builders.ValidationBuilder`1
  commentId: T:FlowRight.Validation.Builders.ValidationBuilder`1
  id: ValidationBuilder`1
  parent: FlowRight.Validation.Builders
  children:
  - FlowRight.Validation.Builders.ValidationBuilder`1.#ctor
  - FlowRight.Validation.Builders.ValidationBuilder`1.#ctor(FlowRight.Validation.Context.IValidationContext)
  - FlowRight.Validation.Builders.ValidationBuilder`1.Build(System.Func{`0})
  - FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors
  - FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},System.Byte,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},System.Char,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.Nullable{System.DateTime}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.Nullable{System.Decimal}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Double,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},System.Int16,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.Nullable{System.Int32}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Int64,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.Nullable{System.Boolean},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},System.Nullable{System.Byte},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},System.Nullable{System.Char},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Nullable{System.Decimal},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Nullable{System.Double},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.Nullable{System.Guid}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},System.Nullable{System.Int16},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Nullable{System.Int32},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Nullable{System.Int64},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},System.Nullable{System.SByte},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Nullable{System.Single},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},System.Nullable{System.UInt32},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},System.Nullable{System.UInt64},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},System.SByte,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Single,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},System.UInt32,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},System.UInt64,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.String)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlowRight.Core.Results.Result{``0},``0@)
  - FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)
  langs:
  - csharp
  - vb
  name: ValidationBuilder<T>
  nameWithType: ValidationBuilder<T>
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>
  type: Class
  source:
    id: ValidationBuilder
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 44
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: >-
    A fluent validation builder that integrates with the Result&lt;T&gt; pattern to provide comprehensive validation capabilities

    with automatic error aggregation and Result&lt;T&gt; composition support.
  example:
  - >-
    <p><strong>Basic Usage:</strong></p>


    <pre><code class="lang-csharp">Result&lt;Character&gt; result = new ValidationBuilder&lt;Character&gt;()
        .RuleFor(x =&gt; x.Name, request.Name)
            .NotEmpty()
            .MaximumLength(50)
        .RuleFor(x =&gt; x.Age, request.Age)
            .GreaterThan(0)
            .LessThan(120)
        .Build(() =&gt; new Character(request.Name, request.Age));</code></pre>

    <p><strong>Result&lt;T&gt; Composition:</strong></p>


    <pre><code class="lang-csharp">Result&lt;Character&gt; result = new ValidationBuilder&lt;Character&gt;()
        .RuleFor(x =&gt; x.Attributes, AttributeSet.Create(attributes), out AttributeSet? validatedAttributes)
        .RuleFor(x =&gt; x.Edge, Edge.Create(startingEdge), out Edge? validatedEdge)
        .Build(() =&gt; new Character(name, validatedAttributes!, validatedEdge!));</code></pre>

    <p><strong>Conditional Validation:</strong></p>


    <pre><code class="lang-csharp">ValidationBuilder&lt;DicePool&gt; builder = new();

    return builder
        .RuleFor(x =&gt; x.Limit, limit)
            .GreaterThanOrEqualTo(0)
            .When(value =&gt; !ignoreLimit)
            .WithMessage("Limit must be specified when not using Edge");</code></pre>
  syntax:
    content: public class ValidationBuilder<T>
    typeParameters:
    - id: T
      description: The type of object being validated and constructed.
    content.vb: Public Class ValidationBuilder(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: ValidationBuilder(Of T)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T)
  name.vb: ValidationBuilder(Of T)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.#ctor
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.#ctor
  id: '#ctor'
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: ValidationBuilder()
  nameWithType: ValidationBuilder<T>.ValidationBuilder()
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.ValidationBuilder()
  type: Constructor
  source:
    id: .ctor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 62
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Initializes a new instance of the ValidationBuilder class with default settings.
  remarks: >-
    This constructor creates a ValidationBuilder without validation context support.

    For context-aware validation scenarios, use the constructor that accepts an IValidationContext.
  example: []
  syntax:
    content: public ValidationBuilder()
    content.vb: Public Sub New()
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.#ctor*
  nameWithType.vb: ValidationBuilder(Of T).New()
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).New()
  name.vb: New()
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.#ctor(FlowRight.Validation.Context.IValidationContext)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.#ctor(FlowRight.Validation.Context.IValidationContext)
  id: '#ctor(FlowRight.Validation.Context.IValidationContext)'
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: ValidationBuilder(IValidationContext)
  nameWithType: ValidationBuilder<T>.ValidationBuilder(IValidationContext)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.ValidationBuilder(FlowRight.Validation.Context.IValidationContext)
  type: Constructor
  source:
    id: .ctor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 88
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Initializes a new instance of the ValidationBuilder class with validation context support.
  remarks: >-
    This constructor enables context-aware validation scenarios including cross-property validation,

    service integration, custom data sharing, and hierarchical validation.
  example:
  - >-
    <pre><code class="lang-csharp">User user = new UserBuilder().Build();

    IValidationContext context = ValidationContext.Create(user, serviceProvider);

    context.SetCustomData("ValidationMode", "Strict");


    ValidationBuilder&lt;User&gt; builder = new(context);

    Result&lt;User&gt; result = builder
        .RuleFor(x =&gt; x.Email, request.Email)
            .Must((email, ctx) =&gt; ValidateWithContext(email, ctx), "Invalid email")
        .Build(() =&gt; user);</code></pre>
  syntax:
    content: public ValidationBuilder(IValidationContext validationContext)
    parameters:
    - id: validationContext
      type: FlowRight.Validation.Context.IValidationContext
      description: The validation context for complex validation scenarios.
    content.vb: Public Sub New(validationContext As IValidationContext)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.#ctor*
  nameWithType.vb: ValidationBuilder(Of T).New(IValidationContext)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).New(FlowRight.Validation.Context.IValidationContext)
  name.vb: New(IValidationContext)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.Build(System.Func{`0})
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.Build(System.Func{`0})
  id: Build(System.Func{`0})
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: Build(Func<T>)
  nameWithType: ValidationBuilder<T>.Build(Func<T>)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.Build(System.Func<T>)
  type: Method
  source:
    id: Build
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 114
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Builds the final Result&lt;T&gt; by validating all accumulated rules and constructing the object if validation succeeds.
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; result = builder.Build(() =&gt; new User(validatedName, validatedEmail));


    return result.Match(
        onSuccess: user =&gt; Ok(user),
        onValidationException: errors =&gt; BadRequest(errors));</code></pre>
  syntax:
    content: public Result<T> Build(Func<T> factory)
    parameters:
    - id: factory
      type: System.Func{{T}}
      description: A factory function to create the validated object when all validations pass.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A Result&lt;T&gt; containing either the successfully created object or a validation failure with all accumulated errors.
    content.vb: Public Function Build(factory As Func(Of T)) As Result(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.Build*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when factory is null.
  nameWithType.vb: ValidationBuilder(Of T).Build(Func(Of T))
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).Build(System.Func(Of T))
  name.vb: Build(Func(Of T))
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors
  id: GetErrors
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: GetErrors()
  nameWithType: ValidationBuilder<T>.GetErrors()
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.GetErrors()
  type: Method
  source:
    id: GetErrors
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 141
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Gets all accumulated validation errors as a dictionary mapping property names to error message arrays.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.Name, "").NotEmpty();

    builder.RuleFor(x =&gt; x.Email, "invalid").EmailAddress();


    Dictionary&lt;string, string[]&gt; errors = builder.GetErrors();

    // errors["Name"] contains ["Name is required"]

    // errors["Email"] contains ["Email address format is invalid"]</code></pre>
  syntax:
    content: public Dictionary<string, string[]> GetErrors()
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String[]}
      description: >-
        A dictionary where keys are property names and values are arrays of error messages for that property.

        Returns an empty dictionary if no validation errors have been accumulated.
    content.vb: Public Function GetErrors() As Dictionary(Of String, String())
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors*
  nameWithType.vb: ValidationBuilder(Of T).GetErrors()
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).GetErrors()
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, Guid?>>, Guid?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, Guid?>>, Guid?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, System.Guid?>>, System.Guid?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 159
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a Guid? property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Entity&gt; builder = new();

    builder.RuleFor(x =&gt; x.Id, request.Id)
        .NotEqual(Guid.Empty)
        .WithMessage("Entity ID cannot be empty");</code></pre>
  syntax:
    content: public GuidPropertyValidator<T> RuleFor(Expression<Func<T, Guid?>> propertySelector, Guid? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Guid}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Id).
    - id: value
      type: System.Nullable{System.Guid}
      description: The actual value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GuidPropertyValidator{{T}}
      description: A GuidPropertyValidator&lt;T&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Guid?)), value As Guid?, displayName As String = Nothing) As GuidPropertyValidator(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Guid?)), Guid?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Guid?)), System.Guid?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Guid?)), Guid?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.Nullable{System.Guid}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.Nullable{System.Guid}@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Nullable{System.Guid},System.Nullable{System.Guid}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, Guid?>>, Guid?, out Guid?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, Guid?>>, Guid?, out Guid?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, System.Guid?>>, System.Guid?, out System.Guid?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 170
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a Guid? property with out parameter support for value extraction.
  example: []
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, Guid?>> propertySelector, Guid? value, out Guid? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Guid}}}
      description: An expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Guid}
      description: The actual Guid? value to be validated.
    - id: validatedValue
      type: System.Nullable{System.Guid}
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Guid?)), value As Guid?, validatedValue As Guid?, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Guid?)), Guid?, Guid?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Guid?)), System.Guid?, System.Guid?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Guid?)), Guid?, Guid?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, string>>, string, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, string>>, string, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, string>>, string, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 206
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a string property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.Name, request.Name)
        .NotEmpty()
        .MinimumLength(2)
        .MaximumLength(50)
        .Matches("^[a-zA-Z ]+$")
        .WithMessage("Name must contain only letters and spaces");</code></pre>
  syntax:
    content: public StringPropertyValidator<T> RuleFor(Expression<Func<T, string>> propertySelector, string value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.String}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Name).
    - id: value
      type: System.String
      description: The actual string value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.StringPropertyValidator{{T}}
      description: A StringPropertyValidator&lt;T&gt; for chaining additional string-specific validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, String)), value As String, displayName As String = Nothing) As StringPropertyValidator(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, String)), String, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, String)), String, String)
  name.vb: RuleFor(Expression(Of Func(Of T, String)), String, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, string>>, string, out string?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, string>>, string, out string?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, string>>, string, out string?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 233
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: >-
    Creates validation rules for a string property with out parameter support for value extraction.

    This overload performs basic validation immediately and provides the validated value through the out parameter.
  remarks: >-
    This overload enables extraction of validated values for use in object construction patterns.

    The out parameter will contain the input value if it passes basic validation (not null/empty for strings),

    or null if the basic validation fails.

    For more complex validation rules, use the standard RuleFor overload that returns a property validator.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.Name, request.Name, out string? validatedName);

    builder.RuleFor(x =&gt; x.Age, request.Age, out int? validatedAge);


    Result&lt;User&gt; result = builder.Build(() =&gt; new User(validatedName!, validatedAge!.Value, "email"));</code></pre>
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, string>> propertySelector, string value, out string? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.String}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Name).
    - id: value
      type: System.String
      description: The actual string value to be validated.
    - id: validatedValue
      type: System.String
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining of other property validations.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, String)), value As String, validatedValue As String, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, String)), String, String, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, String)), String, String, String)
  name.vb: RuleFor(Expression(Of Func(Of T, String)), String, String, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlowRight.Core.Results.Result{``0},``0@)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlowRight.Core.Results.Result{``0},``0@)
  id: RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},FlowRight.Core.Results.Result{``0},``0@)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor<TProp>(Expression<Func<T, TProp>>, Result<TProp>, out TProp?)
  nameWithType: ValidationBuilder<T>.RuleFor<TProp>(Expression<Func<T, TProp>>, Result<TProp>, out TProp?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor<TProp>(System.Linq.Expressions.Expression<System.Func<T, TProp>>, FlowRight.Core.Results.Result<TProp>, out TProp?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 286
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: >-
    Integrates Result&lt;T&gt; validation into the validation builder, automatically extracting failures and providing access to successful values.

    This is the key method that enables composition of multiple Result&lt;T&gt; operations in a single validation chain.
  remarks: >-
    <p>

    This method automatically handles all Result&lt;T&gt; failure types:

    - Simple errors: Added as single error messages

    - Validation exceptions: Merged with existing validation errors

    - Security exceptions: Added as security-related errors

    - Operation cancelled exceptions: Added as cancellation errors

    </p>

    <p>

    The out parameter allows access to successful validation results for object construction,

    enabling patterns like: new Character(name, validatedAttributes!, validatedEdge!)

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Compose multiple Result&lt;T&gt; validations

    Result&lt;Character&gt; result = new ValidationBuilder&lt;Character&gt;()
        .RuleFor(x =&gt; x.Attributes, AttributeSet.Create(request.Attributes), out AttributeSet? attributes)
        .RuleFor(x =&gt; x.Edge, Edge.Create(request.StartingEdge), out Edge? edge)
        .RuleFor(x =&gt; x.Health, ConditionMonitor.Create(attributes), out ConditionMonitor? health)
        .Build(() =&gt; new Character(request.Name, attributes!, edge!, health!));

    // All validation failures are automatically aggregated

    // Success values are available through out parameters</code></pre>
  syntax:
    content: public ValidationBuilder<T> RuleFor<TProp>(Expression<Func<T, TProp>> propertySelector, Result<TProp> result, out TProp? value)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProp}}}
      description: An expression selecting the property (e.g., x =&gt; x.Attributes).
    - id: result
      type: FlowRight.Core.Results.Result{{TProp}}
      description: A Result&lt;TProp&gt; containing either a successful value or validation errors.
    - id: value
      type: '{TProp}'
      description: Output parameter providing access to the successful value for object construction, or default if validation failed.
    typeParameters:
    - id: TProp
      description: The type of property being validated through a Result&lt;T&gt;.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(Of TProp)(propertySelector As Expression(Of Func(Of T, TProp)), result As Result(Of TProp), value As TProp) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Of TProp)(Expression(Of Func(Of T, TProp)), Result(Of TProp), TProp)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of T, TProp)), FlowRight.Core.Results.Result(Of TProp), TProp)
  name.vb: RuleFor(Of TProp)(Expression(Of Func(Of T, TProp)), Result(Of TProp), TProp)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, int>>, int, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, int>>, int, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, int>>, int, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 342
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for an integer property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.Age, request.Age)
        .GreaterThan(0)
        .LessThan(120)
        .WithMessage("Age must be between 1 and 119");</code></pre>
  syntax:
    content: public NumericPropertyValidator<T, int> RuleFor(Expression<Func<T, int>> propertySelector, int value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Age).
    - id: value
      type: System.Int32
      description: The actual integer value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int32}
      description: A NumericPropertyValidator&lt;T, int&gt; for chaining additional numeric validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Integer)), value As Integer, displayName As String = Nothing) As NumericPropertyValidator(Of T, Integer)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Integer)), Integer, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Integer)), Integer, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Integer)), Integer, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.Nullable{System.Int32}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.Nullable{System.Int32}@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Int32,System.Nullable{System.Int32}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, int>>, int, out int?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, int>>, int, out int?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, int>>, int, out int?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 368
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: >-
    Creates validation rules for an integer property with out parameter support for value extraction.

    This overload performs basic validation immediately and provides the validated value through the out parameter.
  remarks: >-
    This overload enables extraction of validated values for use in object construction patterns.

    The out parameter will contain the input value if it passes basic validation (greater than or equal to 0),

    or null if the basic validation fails.

    For more complex validation rules, use the standard RuleFor overload that returns a property validator.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.Age, request.Age, out int? validatedAge);


    Result&lt;User&gt; result = builder.Build(() =&gt; new User("name", "email", validatedAge!.Value));</code></pre>
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, int>> propertySelector, int value, out int? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Age).
    - id: value
      type: System.Int32
      description: The actual integer value to be validated.
    - id: validatedValue
      type: System.Nullable{System.Int32}
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining of other property validations.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Integer)), value As Integer, validatedValue As Integer?, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Integer)), Integer, Integer?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Integer)), Integer, Integer?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Integer)), Integer, Integer?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Int64,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Int64,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Int64,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, long>>, long, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, long>>, long, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, long>>, long, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 393
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a long numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, long> RuleFor(Expression<Func<T, long>> propertySelector, long value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Int64
      description: The long value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int64}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Long)), value As Long, displayName As String = Nothing) As NumericPropertyValidator(Of T, Long)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Long)), Long, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Long)), Long, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Long)), Long, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, decimal>>, decimal, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, decimal>>, decimal, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, decimal>>, decimal, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 403
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a decimal numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, decimal> RuleFor(Expression<Func<T, decimal>> propertySelector, decimal value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Decimal
      description: The decimal value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Decimal}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Decimal)), value As Decimal, displayName As String = Nothing) As NumericPropertyValidator(Of T, Decimal)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Decimal)), Decimal, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal)), Decimal, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Decimal)), Decimal, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.Nullable{System.Decimal}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.Nullable{System.Decimal}@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Decimal,System.Nullable{System.Decimal}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, decimal>>, decimal, out decimal?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, decimal>>, decimal, out decimal?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, decimal>>, decimal, out decimal?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 414
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a decimal property with out parameter support for value extraction.
  example: []
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, decimal>> propertySelector, decimal value, out decimal? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
      description: An expression selecting the property to validate.
    - id: value
      type: System.Decimal
      description: The actual decimal value to be validated.
    - id: validatedValue
      type: System.Nullable{System.Decimal}
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Decimal)), value As Decimal, validatedValue As Decimal?, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Decimal)), Decimal, Decimal?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal)), Decimal, Decimal?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Decimal)), Decimal, Decimal?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Double,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Double,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Double}},System.Double,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, double>>, double, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, double>>, double, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, double>>, double, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 439
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a double numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, double> RuleFor(Expression<Func<T, double>> propertySelector, double value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Double
      description: The double value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Double}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Double)), value As Double, displayName As String = Nothing) As NumericPropertyValidator(Of T, Double)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Double)), Double, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Double)), Double, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Double)), Double, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Single,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Single,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Single}},System.Single,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, float>>, float, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, float>>, float, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, float>>, float, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 449
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a float numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, float> RuleFor(Expression<Func<T, float>> propertySelector, float value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Single
      description: The float value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Single}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Single)), value As Single, displayName As String = Nothing) As NumericPropertyValidator(Of T, Single)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Single)), Single, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Single)), Single, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Single)), Single, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},System.Int16,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},System.Int16,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}},System.Int16,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, short>>, short, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, short>>, short, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, short>>, short, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 459
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a short numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, short> RuleFor(Expression<Func<T, short>> propertySelector, short value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int16}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Int16
      description: The short value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int16}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Short)), value As Short, displayName As String = Nothing) As NumericPropertyValidator(Of T, Short)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Short)), Short, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Short)), Short, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Short)), Short, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.String)
  id: RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>>, IEnumerable<TItem>, string?)
  nameWithType: ValidationBuilder<T>.RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>>, IEnumerable<TItem>, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor<TItem>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TItem>>>, System.Collections.Generic.IEnumerable<TItem>, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 481
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for an enumerable property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Character&gt; builder = new();

    builder.RuleFor(x =&gt; x.Skills, request.Skills)
        .NotEmpty()
        .MinCount(1)
        .MaxCount(20)
        .Unique()
        .WithMessage("Character must have 1-20 unique skills");</code></pre>
  syntax:
    content: public EnumerablePropertyValidator<T, TItem> RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>> propertySelector, IEnumerable<TItem> value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TItem}}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Skills).
    - id: value
      type: System.Collections.Generic.IEnumerable{{TItem}}
      description: The actual enumerable value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    typeParameters:
    - id: TItem
      description: The type of items in the enumerable.
    return:
      type: FlowRight.Validation.Validators.EnumerablePropertyValidator{{T},{TItem}}
      description: An EnumerablePropertyValidator&lt;T, TItem&gt; for chaining additional collection-specific validation rules.
    content.vb: Public Function RuleFor(Of TItem)(propertySelector As Expression(Of Func(Of T, IEnumerable(Of TItem))), value As IEnumerable(Of TItem), displayName As String = Nothing) As EnumerablePropertyValidator(Of T, TItem)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Of TItem)(Expression(Of Func(Of T, IEnumerable(Of TItem))), IEnumerable(Of TItem), String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TItem))), System.Collections.Generic.IEnumerable(Of TItem), String)
  name.vb: RuleFor(Of TItem)(Expression(Of Func(Of T, IEnumerable(Of TItem))), IEnumerable(Of TItem), String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.String)
  id: RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>>, IEnumerable<TItem>, out IEnumerable<TItem>?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>>, IEnumerable<TItem>, out IEnumerable<TItem>?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor<TItem>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TItem>>>, System.Collections.Generic.IEnumerable<TItem>, out System.Collections.Generic.IEnumerable<TItem>?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 493
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for an enumerable property with out parameter support for value extraction.
  example: []
  syntax:
    content: public ValidationBuilder<T> RuleFor<TItem>(Expression<Func<T, IEnumerable<TItem>>> propertySelector, IEnumerable<TItem> value, out IEnumerable<TItem>? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TItem}}}}
      description: An expression selecting the property to validate.
    - id: value
      type: System.Collections.Generic.IEnumerable{{TItem}}
      description: The actual enumerable value to be validated.
    - id: validatedValue
      type: System.Collections.Generic.IEnumerable{{TItem}}
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages.
    typeParameters:
    - id: TItem
      description: The type of items in the enumerable.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(Of TItem)(propertySelector As Expression(Of Func(Of T, IEnumerable(Of TItem))), value As IEnumerable(Of TItem), validatedValue As IEnumerable(Of TItem), displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Of TItem)(Expression(Of Func(Of T, IEnumerable(Of TItem))), IEnumerable(Of TItem), IEnumerable(Of TItem), String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TItem))), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), String)
  name.vb: RuleFor(Of TItem)(Expression(Of Func(Of T, IEnumerable(Of TItem))), IEnumerable(Of TItem), IEnumerable(Of TItem), String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)
  id: RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor<TProp>(Expression<Func<T, TProp>>, TProp, string?)
  nameWithType: ValidationBuilder<T>.RuleFor<TProp>(Expression<Func<T, TProp>>, TProp, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor<TProp>(System.Linq.Expressions.Expression<System.Func<T, TProp>>, TProp, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 529
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: >-
    Creates validation rules for any property type using a fluent interface. This is the fallback validator for types

    that don't have specialized validators (string, numeric, enumerable, guid).
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Order&gt; builder = new();

    builder.RuleFor(x =&gt; x.Status, request.Status)
        .NotNull()
        .Must(status =&gt; status != OrderStatus.Invalid, "Order status cannot be Invalid")
        .Equal(OrderStatus.Pending);</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, TProp> RuleFor<TProp>(Expression<Func<T, TProp>> propertySelector, TProp value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProp}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.CustomType).
    - id: value
      type: '{TProp}'
      description: The actual value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    typeParameters:
    - id: TProp
      description: The type of property being validated.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},{TProp}}
      description: A GenericPropertyValidator&lt;T, TProp&gt; for chaining general validation rules.
    content.vb: Public Function RuleFor(Of TProp)(propertySelector As Expression(Of Func(Of T, TProp)), value As TProp, displayName As String = Nothing) As GenericPropertyValidator(Of T, TProp)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Of TProp)(Expression(Of Func(Of T, TProp)), TProp, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of T, TProp)), TProp, String)
  name.vb: RuleFor(Of TProp)(Expression(Of Func(Of T, TProp)), TProp, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, DateTime>>, DateTime, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, DateTime>>, DateTime, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, System.DateTime>>, System.DateTime, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 548
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a DateTime property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Event&gt; builder = new();

    builder.RuleFor(x =&gt; x.StartDate, request.StartDate)
        .NotEqual(default)
        .Must(date =&gt; date &gt; DateTime.Now, "Start date must be in the future")
        .WithMessage("Invalid start date provided");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, DateTime> RuleFor(Expression<Func<T, DateTime>> propertySelector, DateTime value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.DateTime}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.CreatedAt).
    - id: value
      type: System.DateTime
      description: The actual DateTime value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.DateTime}
      description: A GenericPropertyValidator&lt;T, DateTime&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Date)), value As Date, displayName As String = Nothing) As GenericPropertyValidator(Of T, Date)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Date)), Date, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Date)), Date, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Date)), Date, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.Nullable{System.DateTime}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.Nullable{System.DateTime}@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},System.DateTime,System.Nullable{System.DateTime}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, DateTime>>, DateTime, out DateTime?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, DateTime>>, DateTime, out DateTime?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, System.DateTime>>, System.DateTime, out System.DateTime?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 559
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a DateTime property with out parameter support for value extraction.
  example: []
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, DateTime>> propertySelector, DateTime value, out DateTime? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.DateTime}}
      description: An expression selecting the property to validate.
    - id: value
      type: System.DateTime
      description: The actual DateTime value to be validated.
    - id: validatedValue
      type: System.Nullable{System.DateTime}
      description: Output parameter that receives the validated value if validation succeeds, or null if validation fails.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Date)), value As Date, validatedValue As Date?, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Date)), Date, Date?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Date)), Date, Date?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Date)), Date, Date?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, DateTime?>>, DateTime?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, DateTime?>>, DateTime?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, System.DateTime?>>, System.DateTime?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 593
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable DateTime property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Event&gt; builder = new();

    builder.RuleFor(x =&gt; x.EndDate, request.EndDate)
        .Notnull()
        .Must(date =&gt; date &gt; DateTime.Now, "End date must be in the future")
        .WithMessage("End date is required and must be valid");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, DateTime?> RuleFor(Expression<Func<T, DateTime?>> propertySelector, DateTime? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.DateTime}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.UpdatedAt).
    - id: value
      type: System.Nullable{System.DateTime}
      description: The actual nullable DateTime value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.DateTime}}
      description: A GenericPropertyValidator&lt;T, DateTime?&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Date?)), value As Date?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Date?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Date?)), Date?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Date?)), Date?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Date?)), Date?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, bool>>, bool, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, bool>>, bool, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 611
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a boolean property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;User&gt; builder = new();

    builder.RuleFor(x =&gt; x.HasAcceptedTerms, request.HasAcceptedTerms)
        .Equal(true)
        .WithMessage("Terms and conditions must be accepted");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, bool> RuleFor(Expression<Func<T, bool>> propertySelector, bool value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.IsActive).
    - id: value
      type: System.Boolean
      description: The actual boolean value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Boolean}
      description: A GenericPropertyValidator&lt;T, bool&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Boolean)), value As Boolean, displayName As String = Nothing) As GenericPropertyValidator(Of T, Boolean)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Boolean)), Boolean, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Boolean)), Boolean, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean}@,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean}@,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Nullable{System.Boolean}@,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, bool>>, bool, out bool?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, bool>>, bool, out bool?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool, out bool?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 622
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a boolean property with out parameter support for value extraction.
  example: []
  syntax:
    content: public ValidationBuilder<T> RuleFor(Expression<Func<T, bool>> propertySelector, bool value, out bool? validatedValue, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: An expression selecting the property to validate.
    - id: value
      type: System.Boolean
      description: The actual boolean value to be validated.
    - id: validatedValue
      type: System.Nullable{System.Boolean}
      description: Output parameter that receives the validated value.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages.
    return:
      type: FlowRight.Validation.Builders.ValidationBuilder`1
      description: The ValidationBuilder&lt;T&gt; for continued chaining.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Boolean)), value As Boolean, validatedValue As Boolean?, displayName As String = Nothing) As ValidationBuilder(Of T)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Boolean)), Boolean, Boolean?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean, Boolean?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Boolean)), Boolean, Boolean?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.Nullable{System.Boolean},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.Nullable{System.Boolean},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.Nullable{System.Boolean},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, bool?>>, bool?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, bool?>>, bool?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, bool?>>, bool?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 645
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable boolean property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Account&gt; builder = new();

    builder.RuleFor(x =&gt; x.IsEmailVerified, request.IsEmailVerified)
        .Notnull()
        .Equal(true)
        .WithMessage("Email verification is required");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, bool?> RuleFor(Expression<Func<T, bool?>> propertySelector, bool? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Boolean}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.IsVerified).
    - id: value
      type: System.Nullable{System.Boolean}
      description: The actual nullable boolean value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Boolean}}
      description: A GenericPropertyValidator&lt;T, bool?&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Boolean?)), value As Boolean?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Boolean?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Boolean?)), Boolean?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean?)), Boolean?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Boolean?)), Boolean?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},System.Byte,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},System.Byte,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}},System.Byte,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, byte>>, byte, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, byte>>, byte, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, byte>>, byte, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 655
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a byte numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, byte> RuleFor(Expression<Func<T, byte>> propertySelector, byte value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Byte}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Byte
      description: The byte value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Byte}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Byte)), value As Byte, displayName As String = Nothing) As NumericPropertyValidator(Of T, Byte)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Byte)), Byte, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Byte)), Byte, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Byte)), Byte, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},System.SByte,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},System.SByte,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}},System.SByte,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, sbyte>>, sbyte, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, sbyte>>, sbyte, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, sbyte>>, sbyte, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 665
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a signed byte numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, sbyte> RuleFor(Expression<Func<T, sbyte>> propertySelector, sbyte value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.SByte}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.SByte
      description: The sbyte value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.SByte}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, SByte)), value As SByte, displayName As String = Nothing) As NumericPropertyValidator(Of T, SByte)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, SByte)), SByte, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, SByte)), SByte, String)
  name.vb: RuleFor(Expression(Of Func(Of T, SByte)), SByte, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},System.UInt32,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},System.UInt32,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}},System.UInt32,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, uint>>, uint, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, uint>>, uint, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, uint>>, uint, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 675
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for an unsigned integer numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, uint> RuleFor(Expression<Func<T, uint>> propertySelector, uint value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.UInt32}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.UInt32
      description: The uint value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.UInt32}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, UInteger)), value As UInteger, displayName As String = Nothing) As NumericPropertyValidator(Of T, UInteger)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, UInteger)), UInteger, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, UInteger)), UInteger, String)
  name.vb: RuleFor(Expression(Of Func(Of T, UInteger)), UInteger, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},System.UInt64,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},System.UInt64,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}},System.UInt64,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, ulong>>, ulong, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, ulong>>, ulong, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, ulong>>, ulong, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 685
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for an unsigned long numeric property using a fluent interface.
  example: []
  syntax:
    content: public NumericPropertyValidator<T, ulong> RuleFor(Expression<Func<T, ulong>> propertySelector, ulong value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.UInt64}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.UInt64
      description: The ulong value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.UInt64}
      description: A numeric property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, ULong)), value As ULong, displayName As String = Nothing) As NumericPropertyValidator(Of T, ULong)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, ULong)), ULong, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, ULong)), ULong, String)
  name.vb: RuleFor(Expression(Of Func(Of T, ULong)), ULong, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Nullable{System.Int32},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Nullable{System.Int32},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Nullable{System.Int32},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, int?>>, int?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, int?>>, int?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, int?>>, int?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 697
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable integer numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, int?> RuleFor(Expression<Func<T, int?>> propertySelector, int? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Int32}
      description: The nullable integer value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int32}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Integer?)), value As Integer?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Integer?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Integer?)), Integer?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Integer?)), Integer?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Integer?)), Integer?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Nullable{System.Int64},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Nullable{System.Int64},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Nullable{System.Int64},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, long?>>, long?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, long?>>, long?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, long?>>, long?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 707
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable long numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, long?> RuleFor(Expression<Func<T, long?>> propertySelector, long? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Int64}
      description: The nullable long value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int64}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Long?)), value As Long?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Long?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Long?)), Long?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Long?)), Long?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Long?)), Long?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Nullable{System.Decimal},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Nullable{System.Decimal},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Nullable{System.Decimal},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, decimal?>>, decimal?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, decimal?>>, decimal?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, decimal?>>, decimal?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 717
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable decimal numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, decimal?> RuleFor(Expression<Func<T, decimal?>> propertySelector, decimal? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Decimal}
      description: The nullable decimal value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Decimal}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Decimal?)), value As Decimal?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Decimal?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Decimal?)), Decimal?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal?)), Decimal?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Decimal?)), Decimal?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Nullable{System.Double},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Nullable{System.Double},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Nullable{System.Double},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, double?>>, double?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, double?>>, double?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, double?>>, double?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 727
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable double numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, double?> RuleFor(Expression<Func<T, double?>> propertySelector, double? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Double}
      description: The nullable double value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Double}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Double?)), value As Double?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Double?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Double?)), Double?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Double?)), Double?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Double?)), Double?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Nullable{System.Single},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Nullable{System.Single},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Nullable{System.Single},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, float?>>, float?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, float?>>, float?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, float?>>, float?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 737
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable float numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, float?> RuleFor(Expression<Func<T, float?>> propertySelector, float? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Single}
      description: The nullable float value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Single}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Single?)), value As Single?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Single?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Single?)), Single?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Single?)), Single?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Single?)), Single?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},System.Nullable{System.Int16},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},System.Nullable{System.Int16},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}},System.Nullable{System.Int16},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, short?>>, short?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, short?>>, short?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, short?>>, short?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 747
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable short numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, short?> RuleFor(Expression<Func<T, short?>> propertySelector, short? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int16}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Int16}
      description: The nullable short value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int16}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Short?)), value As Short?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Short?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Short?)), Short?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Short?)), Short?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Short?)), Short?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},System.Nullable{System.Byte},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},System.Nullable{System.Byte},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}},System.Nullable{System.Byte},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, byte?>>, byte?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, byte?>>, byte?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, byte?>>, byte?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 757
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable byte numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, byte?> RuleFor(Expression<Func<T, byte?>> propertySelector, byte? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Byte}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.Byte}
      description: The nullable byte value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Byte}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Byte?)), value As Byte?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Byte?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Byte?)), Byte?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Byte?)), Byte?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Byte?)), Byte?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},System.Nullable{System.SByte},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},System.Nullable{System.SByte},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}},System.Nullable{System.SByte},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, sbyte?>>, sbyte?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, sbyte?>>, sbyte?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, sbyte?>>, sbyte?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 767
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable signed byte numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, sbyte?> RuleFor(Expression<Func<T, sbyte?>> propertySelector, sbyte? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.SByte}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.SByte}
      description: The nullable sbyte value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.SByte}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, SByte?)), value As SByte?, displayName As String = Nothing) As GenericPropertyValidator(Of T, SByte?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, SByte?)), SByte?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, SByte?)), SByte?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, SByte?)), SByte?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},System.Nullable{System.UInt32},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},System.Nullable{System.UInt32},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}},System.Nullable{System.UInt32},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, uint?>>, uint?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, uint?>>, uint?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, uint?>>, uint?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 777
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable unsigned integer numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, uint?> RuleFor(Expression<Func<T, uint?>> propertySelector, uint? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.UInt32}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.UInt32}
      description: The nullable uint value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.UInt32}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, UInteger?)), value As UInteger?, displayName As String = Nothing) As GenericPropertyValidator(Of T, UInteger?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, UInteger?)), UInteger?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, UInteger?)), UInteger?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, UInteger?)), UInteger?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},System.Nullable{System.UInt64},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},System.Nullable{System.UInt64},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}},System.Nullable{System.UInt64},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, ulong?>>, ulong?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, ulong?>>, ulong?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, ulong?>>, ulong?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 787
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable unsigned long numeric property using a fluent interface.
  example: []
  syntax:
    content: public GenericPropertyValidator<T, ulong?> RuleFor(Expression<Func<T, ulong?>> propertySelector, ulong? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.UInt64}}}
      description: Expression selecting the property to validate.
    - id: value
      type: System.Nullable{System.UInt64}
      description: The nullable ulong value for the property.
    - id: displayName
      type: System.String
      description: Optional display name for validation messages.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.UInt64}}
      description: A generic property validator for further rule configuration.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, ULong?)), value As ULong?, displayName As String = Nothing) As GenericPropertyValidator(Of T, ULong?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, ULong?)), ULong?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, ULong?)), ULong?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, ULong?)), ULong?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},System.Char,System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},System.Char,System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Char}},System.Char,System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, char>>, char, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, char>>, char, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, char>>, char, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 807
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a character property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Student&gt; builder = new();

    builder.RuleFor(x =&gt; x.Grade, request.Grade)
        .Must(grade =&gt; "ABCDF".Contains(grade), "Grade must be A, B, C, D, or F")
        .WithMessage("Invalid grade provided");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, char> RuleFor(Expression<Func<T, char>> propertySelector, char value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Char}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.Grade).
    - id: value
      type: System.Char
      description: The actual character value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Char}
      description: A GenericPropertyValidator&lt;T, char&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Char)), value As Char, displayName As String = Nothing) As GenericPropertyValidator(Of T, Char)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Char)), Char, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Char)), Char, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Char)), Char, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},System.Nullable{System.Char},System.String)
  commentId: M:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},System.Nullable{System.Char},System.String)
  id: RuleFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}},System.Nullable{System.Char},System.String)
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: RuleFor(Expression<Func<T, char?>>, char?, string?)
  nameWithType: ValidationBuilder<T>.RuleFor(Expression<Func<T, char?>>, char?, string?)
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor(System.Linq.Expressions.Expression<System.Func<T, char?>>, char?, string?)
  type: Method
  source:
    id: RuleFor
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 825
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Creates validation rules for a nullable character property using a fluent interface.
  example:
  - >-
    <pre><code class="lang-csharp">ValidationBuilder&lt;Person&gt; builder = new();

    builder.RuleFor(x =&gt; x.MiddleInitial, request.MiddleInitial)
        .Must(initial =&gt; initial is null || char.IsLetter(initial.Value), "Middle initial must be a letter")
        .WithMessage("Invalid middle initial provided");</code></pre>
  syntax:
    content: public GenericPropertyValidator<T, char?> RuleFor(Expression<Func<T, char?>> propertySelector, char? value, string? displayName = null)
    parameters:
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Char}}}
      description: An expression selecting the property to validate (e.g., x =&gt; x.MiddleInitial).
    - id: value
      type: System.Nullable{System.Char}
      description: The actual nullable character value to be validated.
    - id: displayName
      type: System.String
      description: Optional custom display name for error messages. If null, uses the property name from the expression.
    return:
      type: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Char}}
      description: A GenericPropertyValidator&lt;T, char?&gt; for chaining additional validation rules.
    content.vb: Public Function RuleFor(propertySelector As Expression(Of Func(Of T, Char?)), value As Char?, displayName As String = Nothing) As GenericPropertyValidator(Of T, Char?)
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  nameWithType.vb: ValidationBuilder(Of T).RuleFor(Expression(Of Func(Of T, Char?)), Char?, String)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor(System.Linq.Expressions.Expression(Of System.Func(Of T, Char?)), Char?, String)
  name.vb: RuleFor(Expression(Of Func(Of T, Char?)), Char?, String)
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors
  commentId: P:FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors
  id: HasErrors
  parent: FlowRight.Validation.Builders.ValidationBuilder`1
  langs:
  - csharp
  - vb
  name: HasErrors
  nameWithType: ValidationBuilder<T>.HasErrors
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.HasErrors
  type: Property
  source:
    id: HasErrors
    path: /home/ringo/source/FlowRight-documentation/src/Validation/Builders/ValidationBuilder.cs
    startLine: 988
  assemblies:
  - FlowRight.Validation
  namespace: FlowRight.Validation.Builders
  summary: Gets a value indicating whether any validation errors have been accumulated.
  remarks: >-
    This property is used internally by the Build method to determine whether to return

    a success or failure result. It can also be used externally to check validation state

    before calling Build().
  example: []
  syntax:
    content: public bool HasErrors { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if there are validation errors; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasErrors As Boolean
  overload: FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors*
  nameWithType.vb: ValidationBuilder(Of T).HasErrors
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).HasErrors
references:
- uid: FlowRight.Validation.Builders
  commentId: N:FlowRight.Validation.Builders
  href: FlowRight.html
  name: FlowRight.Validation.Builders
  nameWithType: FlowRight.Validation.Builders
  fullName: FlowRight.Validation.Builders
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Builders
    name: Builders
    href: FlowRight.Validation.Builders.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Builders
    name: Builders
    href: FlowRight.Validation.Builders.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.#ctor*
  commentId: Overload:FlowRight.Validation.Builders.ValidationBuilder`1.#ctor
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html#FlowRight_Validation_Builders_ValidationBuilder_1__ctor
  name: ValidationBuilder
  nameWithType: ValidationBuilder<T>.ValidationBuilder
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.ValidationBuilder
  nameWithType.vb: ValidationBuilder(Of T).New
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).New
  name.vb: New
- uid: FlowRight.Validation.Context.IValidationContext
  commentId: T:FlowRight.Validation.Context.IValidationContext
  parent: FlowRight.Validation.Context
  href: FlowRight.Validation.Context.IValidationContext.html
  name: IValidationContext
  nameWithType: IValidationContext
  fullName: FlowRight.Validation.Context.IValidationContext
- uid: FlowRight.Validation.Context
  commentId: N:FlowRight.Validation.Context
  href: FlowRight.html
  name: FlowRight.Validation.Context
  nameWithType: FlowRight.Validation.Context
  fullName: FlowRight.Validation.Context
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Context
    name: Context
    href: FlowRight.Validation.Context.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Context
    name: Context
    href: FlowRight.Validation.Context.html
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.Build*
  commentId: Overload:FlowRight.Validation.Builders.ValidationBuilder`1.Build
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html#FlowRight_Validation_Builders_ValidationBuilder_1_Build_System_Func__0__
  name: Build
  nameWithType: ValidationBuilder<T>.Build
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.Build
  nameWithType.vb: ValidationBuilder(Of T).Build
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).Build
- uid: System.Func{{T}}
  commentId: T:System.Func{`0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.Result{{T}}
  commentId: T:FlowRight.Core.Results.Result{`0}
  parent: FlowRight.Core.Results
  definition: FlowRight.Core.Results.Result`1
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: FlowRight.Core.Results.Result`1
  commentId: T:FlowRight.Core.Results.Result`1
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results
  commentId: N:FlowRight.Core.Results
  href: FlowRight.html
  name: FlowRight.Core.Results
  nameWithType: FlowRight.Core.Results
  fullName: FlowRight.Core.Results
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors*
  commentId: Overload:FlowRight.Validation.Builders.ValidationBuilder`1.GetErrors
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html#FlowRight_Validation_Builders_ValidationBuilder_1_GetErrors
  name: GetErrors
  nameWithType: ValidationBuilder<T>.GetErrors
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.GetErrors
  nameWithType.vb: ValidationBuilder(Of T).GetErrors
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).GetErrors
- uid: System.Collections.Generic.Dictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<string, string[]>
  nameWithType: Dictionary<string, string[]>
  fullName: System.Collections.Generic.Dictionary<string, string[]>
  nameWithType.vb: Dictionary(Of String, String())
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String())
  name.vb: Dictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor*
  commentId: Overload:FlowRight.Validation.Builders.ValidationBuilder`1.RuleFor
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html#FlowRight_Validation_Builders_ValidationBuilder_1_RuleFor_System_Linq_Expressions_Expression_System_Func__0_System_Nullable_System_Guid____System_Nullable_System_Guid__System_String_
  name: RuleFor
  nameWithType: ValidationBuilder<T>.RuleFor
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.RuleFor
  nameWithType.vb: ValidationBuilder(Of T).RuleFor
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).RuleFor
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Guid}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Guid?>>
  nameWithType: Expression<Func<T, Guid?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Guid?>>
  nameWithType.vb: Expression(Of Func(Of T, Guid?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Guid?))
  name.vb: Expression(Of Func(Of T, Guid?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Guid?
  nameWithType: Guid?
  fullName: System.Guid?
  spec.csharp:
  - uid: System.Guid
    name: Guid
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Guid
    name: Guid
    isExternal: true
  - name: '?'
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: FlowRight.Validation.Validators.GuidPropertyValidator{{T}}
  commentId: T:FlowRight.Validation.Validators.GuidPropertyValidator{`0}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GuidPropertyValidator`1
  href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  name: GuidPropertyValidator<T>
  nameWithType: GuidPropertyValidator<T>
  fullName: FlowRight.Validation.Validators.GuidPropertyValidator<T>
  nameWithType.vb: GuidPropertyValidator(Of T)
  fullName.vb: FlowRight.Validation.Validators.GuidPropertyValidator(Of T)
  name.vb: GuidPropertyValidator(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GuidPropertyValidator`1
    name: GuidPropertyValidator
    href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GuidPropertyValidator`1
    name: GuidPropertyValidator
    href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Validation.Validators.GuidPropertyValidator`1
  commentId: T:FlowRight.Validation.Validators.GuidPropertyValidator`1
  parent: FlowRight.Validation.Validators
  href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  name: GuidPropertyValidator<T>
  nameWithType: GuidPropertyValidator<T>
  fullName: FlowRight.Validation.Validators.GuidPropertyValidator<T>
  nameWithType.vb: GuidPropertyValidator(Of T)
  fullName.vb: FlowRight.Validation.Validators.GuidPropertyValidator(Of T)
  name.vb: GuidPropertyValidator(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GuidPropertyValidator`1
    name: GuidPropertyValidator
    href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GuidPropertyValidator`1
    name: GuidPropertyValidator
    href: FlowRight.Validation.Validators.GuidPropertyValidator-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Validation.Validators
  commentId: N:FlowRight.Validation.Validators
  href: FlowRight.html
  name: FlowRight.Validation.Validators
  nameWithType: FlowRight.Validation.Validators
  fullName: FlowRight.Validation.Validators
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Validators
    name: Validators
    href: FlowRight.Validation.Validators.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Validation
    name: Validation
    href: FlowRight.Validation.html
  - name: .
  - uid: FlowRight.Validation.Validators
    name: Validators
    href: FlowRight.Validation.Validators.html
- uid: FlowRight.Validation.Builders.ValidationBuilder`1
  commentId: T:FlowRight.Validation.Builders.ValidationBuilder`1
  parent: FlowRight.Validation.Builders
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html
  name: ValidationBuilder<T>
  nameWithType: ValidationBuilder<T>
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>
  nameWithType.vb: ValidationBuilder(Of T)
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T)
  name.vb: ValidationBuilder(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Builders.ValidationBuilder`1
    name: ValidationBuilder
    href: FlowRight.Validation.Builders.ValidationBuilder-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Builders.ValidationBuilder`1
    name: ValidationBuilder
    href: FlowRight.Validation.Builders.ValidationBuilder-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.String}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.String}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, string>>
  nameWithType: Expression<Func<T, string>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, string>>
  nameWithType.vb: Expression(Of Func(Of T, String))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, String))
  name.vb: Expression(Of Func(Of T, String))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
- uid: FlowRight.Validation.Validators.StringPropertyValidator{{T}}
  commentId: T:FlowRight.Validation.Validators.StringPropertyValidator{`0}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.StringPropertyValidator`1
  href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  name: StringPropertyValidator<T>
  nameWithType: StringPropertyValidator<T>
  fullName: FlowRight.Validation.Validators.StringPropertyValidator<T>
  nameWithType.vb: StringPropertyValidator(Of T)
  fullName.vb: FlowRight.Validation.Validators.StringPropertyValidator(Of T)
  name.vb: StringPropertyValidator(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.StringPropertyValidator`1
    name: StringPropertyValidator
    href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.StringPropertyValidator`1
    name: StringPropertyValidator
    href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Validation.Validators.StringPropertyValidator`1
  commentId: T:FlowRight.Validation.Validators.StringPropertyValidator`1
  parent: FlowRight.Validation.Validators
  href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  name: StringPropertyValidator<T>
  nameWithType: StringPropertyValidator<T>
  fullName: FlowRight.Validation.Validators.StringPropertyValidator<T>
  nameWithType.vb: StringPropertyValidator(Of T)
  fullName.vb: FlowRight.Validation.Validators.StringPropertyValidator(Of T)
  name.vb: StringPropertyValidator(Of T)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.StringPropertyValidator`1
    name: StringPropertyValidator
    href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.StringPropertyValidator`1
    name: StringPropertyValidator
    href: FlowRight.Validation.Validators.StringPropertyValidator-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TProp}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TProp>>
  nameWithType: Expression<Func<T, TProp>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TProp>>
  nameWithType.vb: Expression(Of Func(Of T, TProp))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TProp))
  name.vb: Expression(Of Func(Of T, TProp))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result{{TProp}}
  commentId: T:FlowRight.Core.Results.Result{``0}
  parent: FlowRight.Core.Results
  definition: FlowRight.Core.Results.Result`1
  href: FlowRight.Core.Results.Result-1.html
  name: Result<TProp>
  nameWithType: Result<TProp>
  fullName: FlowRight.Core.Results.Result<TProp>
  nameWithType.vb: Result(Of TProp)
  fullName.vb: FlowRight.Core.Results.Result(Of TProp)
  name.vb: Result(Of TProp)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: TProp
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TProp
  - name: )
- uid: '{TProp}'
  commentId: '!:TProp'
  definition: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, int>>
  nameWithType: Expression<Func<T, int>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, int>>
  nameWithType.vb: Expression(Of Func(Of T, Integer))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Integer))
  name.vb: Expression(Of Func(Of T, Integer))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int32}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Int32}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, int>
  nameWithType: NumericPropertyValidator<T, int>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, int>
  nameWithType.vb: NumericPropertyValidator(Of T, Integer)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Integer)
  name.vb: NumericPropertyValidator(Of T, Integer)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator`2
  parent: FlowRight.Validation.Validators
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, TNumeric>
  nameWithType: NumericPropertyValidator<T, TNumeric>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, TNumeric>
  nameWithType.vb: NumericPropertyValidator(Of T, TNumeric)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, TNumeric)
  name.vb: NumericPropertyValidator(Of T, TNumeric)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TNumeric
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TNumeric
  - name: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Int64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, long>>
  nameWithType: Expression<Func<T, long>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, long>>
  nameWithType.vb: Expression(Of Func(Of T, Long))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Long))
  name.vb: Expression(Of Func(Of T, Long))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int64}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Int64}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, long>
  nameWithType: NumericPropertyValidator<T, long>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, long>
  nameWithType.vb: NumericPropertyValidator(Of T, Long)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Long)
  name.vb: NumericPropertyValidator(Of T, Long)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, decimal>>
  nameWithType: Expression<Func<T, decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, decimal>>
  nameWithType.vb: Expression(Of Func(Of T, Decimal))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal))
  name.vb: Expression(Of Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Decimal}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Decimal}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, decimal>
  nameWithType: NumericPropertyValidator<T, decimal>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, decimal>
  nameWithType.vb: NumericPropertyValidator(Of T, Decimal)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Decimal)
  name.vb: NumericPropertyValidator(Of T, Decimal)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
- uid: System.Nullable{System.Decimal}
  commentId: T:System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: decimal?
  nameWithType: decimal?
  fullName: decimal?
  nameWithType.vb: Decimal?
  fullName.vb: Decimal?
  name.vb: Decimal?
  spec.csharp:
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Double}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, double>>
  nameWithType: Expression<Func<T, double>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, double>>
  nameWithType.vb: Expression(Of Func(Of T, Double))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Double))
  name.vb: Expression(Of Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Double}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Double}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, double>
  nameWithType: NumericPropertyValidator<T, double>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, double>
  nameWithType.vb: NumericPropertyValidator(Of T, Double)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Double)
  name.vb: NumericPropertyValidator(Of T, Double)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Single}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, float>>
  nameWithType: Expression<Func<T, float>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, float>>
  nameWithType.vb: Expression(Of Func(Of T, Single))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Single))
  name.vb: Expression(Of Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Single}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Single}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, float>
  nameWithType: NumericPropertyValidator<T, float>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, float>
  nameWithType.vb: NumericPropertyValidator(Of T, Single)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Single)
  name.vb: NumericPropertyValidator(Of T, Single)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int16}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Int16}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, short>>
  nameWithType: Expression<Func<T, short>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, short>>
  nameWithType.vb: Expression(Of Func(Of T, Short))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Short))
  name.vb: Expression(Of Func(Of T, Short))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: short
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: )
  - name: )
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Int16}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Int16}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, short>
  nameWithType: NumericPropertyValidator<T, short>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, short>
  nameWithType.vb: NumericPropertyValidator(Of T, Short)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Short)
  name.vb: NumericPropertyValidator(Of T, Short)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: short
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TItem}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, IEnumerable<TItem>>>
  nameWithType: Expression<Func<T, IEnumerable<TItem>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TItem>>>
  nameWithType.vb: Expression(Of Func(Of T, IEnumerable(Of TItem)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TItem)))
  name.vb: Expression(Of Func(Of T, IEnumerable(Of TItem)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TItem}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  nameWithType.vb: IEnumerable(Of TItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem)
  name.vb: IEnumerable(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: FlowRight.Validation.Validators.EnumerablePropertyValidator{{T},{TItem}}
  commentId: T:FlowRight.Validation.Validators.EnumerablePropertyValidator{`0,``0}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
  href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  name: EnumerablePropertyValidator<T, TItem>
  nameWithType: EnumerablePropertyValidator<T, TItem>
  fullName: FlowRight.Validation.Validators.EnumerablePropertyValidator<T, TItem>
  nameWithType.vb: EnumerablePropertyValidator(Of T, TItem)
  fullName.vb: FlowRight.Validation.Validators.EnumerablePropertyValidator(Of T, TItem)
  name.vb: EnumerablePropertyValidator(Of T, TItem)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
    name: EnumerablePropertyValidator
    href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
    name: EnumerablePropertyValidator
    href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TItem
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
  commentId: T:FlowRight.Validation.Validators.EnumerablePropertyValidator`2
  parent: FlowRight.Validation.Validators
  href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  name: EnumerablePropertyValidator<T, TItem>
  nameWithType: EnumerablePropertyValidator<T, TItem>
  fullName: FlowRight.Validation.Validators.EnumerablePropertyValidator<T, TItem>
  nameWithType.vb: EnumerablePropertyValidator(Of T, TItem)
  fullName.vb: FlowRight.Validation.Validators.EnumerablePropertyValidator(Of T, TItem)
  name.vb: EnumerablePropertyValidator(Of T, TItem)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
    name: EnumerablePropertyValidator
    href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.EnumerablePropertyValidator`2
    name: EnumerablePropertyValidator
    href: FlowRight.Validation.Validators.EnumerablePropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TItem
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},{TProp}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,``0}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, TProp>
  nameWithType: GenericPropertyValidator<T, TProp>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, TProp>
  nameWithType.vb: GenericPropertyValidator(Of T, TProp)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, TProp)
  name.vb: GenericPropertyValidator(Of T, TProp)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, TProp>
  nameWithType: GenericPropertyValidator<T, TProp>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, TProp>
  nameWithType.vb: GenericPropertyValidator(Of T, TProp)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, TProp)
  name.vb: GenericPropertyValidator(Of T, TProp)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProp
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.DateTime}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, DateTime>>
  nameWithType: Expression<Func<T, DateTime>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.DateTime>>
  nameWithType.vb: Expression(Of Func(Of T, Date))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Date))
  name.vb: Expression(Of Func(Of T, Date))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: )
  - name: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.DateTime}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.DateTime}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, DateTime>
  nameWithType: GenericPropertyValidator<T, DateTime>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, System.DateTime>
  nameWithType.vb: GenericPropertyValidator(Of T, Date)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Date)
  name.vb: GenericPropertyValidator(Of T, Date)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: DateTime?
  nameWithType: DateTime?
  fullName: System.DateTime?
  nameWithType.vb: Date?
  fullName.vb: Date?
  name.vb: Date?
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.DateTime}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, DateTime?>>
  nameWithType: Expression<Func<T, DateTime?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.DateTime?>>
  nameWithType.vb: Expression(Of Func(Of T, Date?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Date?))
  name.vb: Expression(Of Func(Of T, Date?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.DateTime}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.DateTime}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, DateTime?>
  nameWithType: GenericPropertyValidator<T, DateTime?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, System.DateTime?>
  nameWithType.vb: GenericPropertyValidator(Of T, Date?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Date?)
  name.vb: GenericPropertyValidator(Of T, Date?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Boolean}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Boolean}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, bool>
  nameWithType: GenericPropertyValidator<T, bool>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, bool>
  nameWithType.vb: GenericPropertyValidator(Of T, Boolean)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Boolean)
  name.vb: GenericPropertyValidator(Of T, Boolean)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Boolean}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, bool?>>
  nameWithType: Expression<Func<T, bool?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool?>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean?))
  name.vb: Expression(Of Func(Of T, Boolean?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Boolean}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Boolean}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, bool?>
  nameWithType: GenericPropertyValidator<T, bool?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, bool?>
  nameWithType.vb: GenericPropertyValidator(Of T, Boolean?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Boolean?)
  name.vb: GenericPropertyValidator(Of T, Boolean?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Byte}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Byte}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, byte>>
  nameWithType: Expression<Func<T, byte>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, byte>>
  nameWithType.vb: Expression(Of Func(Of T, Byte))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Byte))
  name.vb: Expression(Of Func(Of T, Byte))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: )
  - name: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.Byte}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.Byte}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, byte>
  nameWithType: NumericPropertyValidator<T, byte>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, byte>
  nameWithType.vb: NumericPropertyValidator(Of T, Byte)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, Byte)
  name.vb: NumericPropertyValidator(Of T, Byte)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.SByte}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.SByte}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, sbyte>>
  nameWithType: Expression<Func<T, sbyte>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, sbyte>>
  nameWithType.vb: Expression(Of Func(Of T, SByte))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, SByte))
  name.vb: Expression(Of Func(Of T, SByte))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: sbyte
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
  - name: )
  - name: )
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.SByte}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.SByte}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, sbyte>
  nameWithType: NumericPropertyValidator<T, sbyte>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, sbyte>
  nameWithType.vb: NumericPropertyValidator(Of T, SByte)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, SByte)
  name.vb: NumericPropertyValidator(Of T, SByte)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: sbyte
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.UInt32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, uint>>
  nameWithType: Expression<Func<T, uint>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, uint>>
  nameWithType.vb: Expression(Of Func(Of T, UInteger))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, UInteger))
  name.vb: Expression(Of Func(Of T, UInteger))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
  - name: )
  - name: )
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.UInt32}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.UInt32}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, uint>
  nameWithType: NumericPropertyValidator<T, uint>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, uint>
  nameWithType.vb: NumericPropertyValidator(Of T, UInteger)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, UInteger)
  name.vb: NumericPropertyValidator(Of T, UInteger)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.UInt64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, ulong>>
  nameWithType: Expression<Func<T, ulong>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, ulong>>
  nameWithType.vb: Expression(Of Func(Of T, ULong))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, ULong))
  name.vb: Expression(Of Func(Of T, ULong))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
  - name: )
  - name: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: FlowRight.Validation.Validators.NumericPropertyValidator{{T},System.UInt64}
  commentId: T:FlowRight.Validation.Validators.NumericPropertyValidator{`0,System.UInt64}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.NumericPropertyValidator`2
  href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  name: NumericPropertyValidator<T, ulong>
  nameWithType: NumericPropertyValidator<T, ulong>
  fullName: FlowRight.Validation.Validators.NumericPropertyValidator<T, ulong>
  nameWithType.vb: NumericPropertyValidator(Of T, ULong)
  fullName.vb: FlowRight.Validation.Validators.NumericPropertyValidator(Of T, ULong)
  name.vb: NumericPropertyValidator(Of T, ULong)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.NumericPropertyValidator`2
    name: NumericPropertyValidator
    href: FlowRight.Validation.Validators.NumericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, int?>>
  nameWithType: Expression<Func<T, int?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, int?>>
  nameWithType.vb: Expression(Of Func(Of T, Integer?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Integer?))
  name.vb: Expression(Of Func(Of T, Integer?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int32}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Int32}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, int?>
  nameWithType: GenericPropertyValidator<T, int?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, int?>
  nameWithType.vb: GenericPropertyValidator(Of T, Integer?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Integer?)
  name.vb: GenericPropertyValidator(Of T, Integer?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, long?>>
  nameWithType: Expression<Func<T, long?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, long?>>
  nameWithType.vb: Expression(Of Func(Of T, Long?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Long?))
  name.vb: Expression(Of Func(Of T, Long?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: long?
  nameWithType: long?
  fullName: long?
  nameWithType.vb: Long?
  fullName.vb: Long?
  name.vb: Long?
  spec.csharp:
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int64}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Int64}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, long?>
  nameWithType: GenericPropertyValidator<T, long?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, long?>
  nameWithType.vb: GenericPropertyValidator(Of T, Long?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Long?)
  name.vb: GenericPropertyValidator(Of T, Long?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, decimal?>>
  nameWithType: Expression<Func<T, decimal?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, decimal?>>
  nameWithType.vb: Expression(Of Func(Of T, Decimal?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal?))
  name.vb: Expression(Of Func(Of T, Decimal?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Decimal}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Decimal}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, decimal?>
  nameWithType: GenericPropertyValidator<T, decimal?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, decimal?>
  nameWithType.vb: GenericPropertyValidator(Of T, Decimal?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Decimal?)
  name.vb: GenericPropertyValidator(Of T, Decimal?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, double?>>
  nameWithType: Expression<Func<T, double?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, double?>>
  nameWithType.vb: Expression(Of Func(Of T, Double?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Double?))
  name.vb: Expression(Of Func(Of T, Double?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: double?
  nameWithType: double?
  fullName: double?
  nameWithType.vb: Double?
  fullName.vb: Double?
  name.vb: Double?
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Double}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Double}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, double?>
  nameWithType: GenericPropertyValidator<T, double?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, double?>
  nameWithType.vb: GenericPropertyValidator(Of T, Double?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Double?)
  name.vb: GenericPropertyValidator(Of T, Double?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, float?>>
  nameWithType: Expression<Func<T, float?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, float?>>
  nameWithType.vb: Expression(Of Func(Of T, Single?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Single?))
  name.vb: Expression(Of Func(Of T, Single?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Single}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Single}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, float?>
  nameWithType: GenericPropertyValidator<T, float?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, float?>
  nameWithType.vb: GenericPropertyValidator(Of T, Single?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Single?)
  name.vb: GenericPropertyValidator(Of T, Single?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int16}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, short?>>
  nameWithType: Expression<Func<T, short?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, short?>>
  nameWithType.vb: Expression(Of Func(Of T, Short?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Short?))
  name.vb: Expression(Of Func(Of T, Short?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: short
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Int16}
  commentId: T:System.Nullable{System.Int16}
  parent: System
  definition: System.Nullable`1
  name: short?
  nameWithType: short?
  fullName: short?
  nameWithType.vb: Short?
  fullName.vb: Short?
  name.vb: Short?
  spec.csharp:
  - uid: System.Int16
    name: short
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Int16}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Int16}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, short?>
  nameWithType: GenericPropertyValidator<T, short?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, short?>
  nameWithType.vb: GenericPropertyValidator(Of T, Short?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Short?)
  name.vb: GenericPropertyValidator(Of T, Short?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: short
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Byte}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, byte?>>
  nameWithType: Expression<Func<T, byte?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, byte?>>
  nameWithType.vb: Expression(Of Func(Of T, Byte?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Byte?))
  name.vb: Expression(Of Func(Of T, Byte?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Byte}
  commentId: T:System.Nullable{System.Byte}
  parent: System
  definition: System.Nullable`1
  name: byte?
  nameWithType: byte?
  fullName: byte?
  nameWithType.vb: Byte?
  fullName.vb: Byte?
  name.vb: Byte?
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Byte}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Byte}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, byte?>
  nameWithType: GenericPropertyValidator<T, byte?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, byte?>
  nameWithType.vb: GenericPropertyValidator(Of T, Byte?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Byte?)
  name.vb: GenericPropertyValidator(Of T, Byte?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.SByte}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, sbyte?>>
  nameWithType: Expression<Func<T, sbyte?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, sbyte?>>
  nameWithType.vb: Expression(Of Func(Of T, SByte?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, SByte?))
  name.vb: Expression(Of Func(Of T, SByte?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: sbyte
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.SByte}
  commentId: T:System.Nullable{System.SByte}
  parent: System
  definition: System.Nullable`1
  name: sbyte?
  nameWithType: sbyte?
  fullName: sbyte?
  nameWithType.vb: SByte?
  fullName.vb: SByte?
  name.vb: SByte?
  spec.csharp:
  - uid: System.SByte
    name: sbyte
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.SByte
    name: SByte
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.SByte}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.SByte}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, sbyte?>
  nameWithType: GenericPropertyValidator<T, sbyte?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, sbyte?>
  nameWithType.vb: GenericPropertyValidator(Of T, SByte?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, SByte?)
  name.vb: GenericPropertyValidator(Of T, SByte?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: sbyte
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.UInt32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, uint?>>
  nameWithType: Expression<Func<T, uint?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, uint?>>
  nameWithType.vb: Expression(Of Func(Of T, UInteger?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, UInteger?))
  name.vb: Expression(Of Func(Of T, UInteger?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: uint?
  nameWithType: uint?
  fullName: uint?
  nameWithType.vb: UInteger?
  fullName.vb: UInteger?
  name.vb: UInteger?
  spec.csharp:
  - uid: System.UInt32
    name: uint
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.UInt32
    name: UInteger
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.UInt32}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.UInt32}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, uint?>
  nameWithType: GenericPropertyValidator<T, uint?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, uint?>
  nameWithType.vb: GenericPropertyValidator(Of T, UInteger?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, UInteger?)
  name.vb: GenericPropertyValidator(Of T, UInteger?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.UInt64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, ulong?>>
  nameWithType: Expression<Func<T, ulong?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, ulong?>>
  nameWithType.vb: Expression(Of Func(Of T, ULong?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, ULong?))
  name.vb: Expression(Of Func(Of T, ULong?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: ulong?
  nameWithType: ulong?
  fullName: ulong?
  nameWithType.vb: ULong?
  fullName.vb: ULong?
  name.vb: ULong?
  spec.csharp:
  - uid: System.UInt64
    name: ulong
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.UInt64
    name: ULong
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.UInt64}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.UInt64}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, ulong?>
  nameWithType: GenericPropertyValidator<T, ulong?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, ulong?>
  nameWithType.vb: GenericPropertyValidator(Of T, ULong?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, ULong?)
  name.vb: GenericPropertyValidator(Of T, ULong?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Char}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Char}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, char>>
  nameWithType: Expression<Func<T, char>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, char>>
  nameWithType.vb: Expression(Of Func(Of T, Char))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Char))
  name.vb: Expression(Of Func(Of T, Char))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: )
  - name: )
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Char}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Char}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, char>
  nameWithType: GenericPropertyValidator<T, char>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, char>
  nameWithType.vb: GenericPropertyValidator(Of T, Char)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Char)
  name.vb: GenericPropertyValidator(Of T, Char)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Char}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Char}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, char?>>
  nameWithType: Expression<Func<T, char?>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, char?>>
  nameWithType.vb: Expression(Of Func(Of T, Char?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Char?))
  name.vb: Expression(Of Func(Of T, Char?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{System.Char}
  commentId: T:System.Nullable{System.Char}
  parent: System
  definition: System.Nullable`1
  name: char?
  nameWithType: char?
  fullName: char?
  nameWithType.vb: Char?
  fullName.vb: Char?
  name.vb: Char?
  spec.csharp:
  - uid: System.Char
    name: char
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Char
    name: Char
    isExternal: true
  - name: '?'
- uid: FlowRight.Validation.Validators.GenericPropertyValidator{{T},System.Nullable{System.Char}}
  commentId: T:FlowRight.Validation.Validators.GenericPropertyValidator{`0,System.Nullable{System.Char}}
  parent: FlowRight.Validation.Validators
  definition: FlowRight.Validation.Validators.GenericPropertyValidator`2
  href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  name: GenericPropertyValidator<T, char?>
  nameWithType: GenericPropertyValidator<T, char?>
  fullName: FlowRight.Validation.Validators.GenericPropertyValidator<T, char?>
  nameWithType.vb: GenericPropertyValidator(Of T, Char?)
  fullName.vb: FlowRight.Validation.Validators.GenericPropertyValidator(Of T, Char?)
  name.vb: GenericPropertyValidator(Of T, Char?)
  spec.csharp:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: FlowRight.Validation.Validators.GenericPropertyValidator`2
    name: GenericPropertyValidator
    href: FlowRight.Validation.Validators.GenericPropertyValidator-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
  - name: '?'
  - name: )
- uid: FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors*
  commentId: Overload:FlowRight.Validation.Builders.ValidationBuilder`1.HasErrors
  href: FlowRight.Validation.Builders.ValidationBuilder-1.html#FlowRight_Validation_Builders_ValidationBuilder_1_HasErrors
  name: HasErrors
  nameWithType: ValidationBuilder<T>.HasErrors
  fullName: FlowRight.Validation.Builders.ValidationBuilder<T>.HasErrors
  nameWithType.vb: ValidationBuilder(Of T).HasErrors
  fullName.vb: FlowRight.Validation.Builders.ValidationBuilder(Of T).HasErrors
