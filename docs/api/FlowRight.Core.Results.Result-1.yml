### YamlMime:ManagedReference
items:
- uid: FlowRight.Core.Results.Result`1
  commentId: T:FlowRight.Core.Results.Result`1
  id: Result`1
  parent: FlowRight.Core.Results
  children:
  - FlowRight.Core.Results.Result`1.Error
  - FlowRight.Core.Results.Result`1.FailureType
  - FlowRight.Core.Results.Result`1.Failures
  - FlowRight.Core.Results.Result`1.IsFailure
  - FlowRight.Core.Results.Result`1.IsSuccess
  - FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  - FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  - FlowRight.Core.Results.Result`1.ResultType
  - FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  - FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  - FlowRight.Core.Results.Result`1.TryGetValue(`0@)
  - FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~System.Boolean
  - FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~`0
  - FlowRight.Core.Results.Result`1.op_Implicit(FlowRight.Core.Results.Result{`0})~FlowRight.Core.Results.Result
  - FlowRight.Core.Results.Result`1.op_Implicit(`0)~FlowRight.Core.Results.Result{`0}
  langs:
  - csharp
  - vb
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  type: Class
  source:
    id: Result
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 50
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: >-
    Provides a generic Result implementation that represents the outcome of operations

    that return a typed value, supporting both success and failure states with comprehensive error handling.
  remarks: >-
    <p>

    This class implements the Result pattern for operations that return a specific value type.

    It provides the same comprehensive error tracking and categorization as the non-generic

    <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> class, while also safely encapsulating the success value.

    </p>

    <p>

    The Result&lt;T&gt; class supports pattern matching through both functional (<xref href="FlowRight.Core.Results.Result%601.Match%60%601(System.Func%7b%600%2c%60%600%7d%2cSystem.Func%7bSystem.String%2c%60%600%7d)" data-throw-if-not-resolved="false"></xref>)

    and imperative (<xref href="FlowRight.Core.Results.Result%601.Switch(System.Action%7b%600%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>) APIs, enabling both

    functional programming and traditional procedural approaches.

    </p>

    <p>

    The class is designed to be immutable after construction and provides full JSON serialization

    support for both success values and error information.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Creating success results

    Result&lt;User&gt; userResult = Result.Success(user);

    Result&lt;int&gt; numberResult = Result.Success(42, ResultType.Information);


    // Creating failure results  

    Result&lt;User&gt; failedResult = Result.Failure&lt;User&gt;("User not found");

    Result&lt;Order&gt; validationResult = Result.ValidationFailure&lt;Order&gt;(validationErrors);


    // Pattern matching

    string message = userResult.Match(
        onSuccess: user =&gt; $"Welcome, {user.Name}!",
        onFailure: error =&gt; $"Login failed: {error}"
    );


    // Imperative handling

    userResult.Switch(
        onSuccess: user =&gt; RedirectToHome(user),
        onFailure: error =&gt; ShowErrorMessage(error)
    );</code></pre>
  syntax:
    content: 'public class Result<T> : IResult<T>, IResult, IResultError<string>'
    typeParameters:
    - id: T
      description: The type of the success value that this result can contain.
    content.vb: Public Class Result(Of T) Implements IResult(Of T), IResult, IResultError(Of String)
  inheritance:
  - System.Object
  implements:
  - FlowRight.Core.Results.IResult{{T}}
  - FlowRight.Core.Results.IResult
  - FlowRight.Core.Results.IResultError{System.String}
  extensionMethods:
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}})
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(System.Func{{T},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(System.Func{{T},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(System.Func{{T},System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  - FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(System.Func{{T},System.Threading.Tasks.Task{FlowRight.Core.Results.Result{{TNext}}}})
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
- uid: FlowRight.Core.Results.Result`1.op_Implicit(FlowRight.Core.Results.Result{`0})~FlowRight.Core.Results.Result
  commentId: M:FlowRight.Core.Results.Result`1.op_Implicit(FlowRight.Core.Results.Result{`0})~FlowRight.Core.Results.Result
  id: op_Implicit(FlowRight.Core.Results.Result{`0})~FlowRight.Core.Results.Result
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: implicit operator Result(Result<T>)
  nameWithType: Result<T>.implicit operator Result(Result<T>)
  fullName: FlowRight.Core.Results.Result<T>.implicit operator FlowRight.Core.Results.Result(FlowRight.Core.Results.Result<T>)
  type: Operator
  source:
    id: op_Implicit
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 136
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Implicitly converts a <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> to a non-generic <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    <p>

    This implicit conversion allows a <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> to be used anywhere a <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref>

    is expected, providing seamless interoperability between generic and non-generic result types.

    </p>

    <p>

    The conversion preserves all error information including failure type, error messages, and validation details.

    For successful results, only the success state is preserved (the value is discarded).

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; userResult = GetUser();

    Result result = userResult; // Implicit conversion


    if (result.IsSuccess)

    {
        // Success state is preserved, but value is not available
    }</code></pre>
  syntax:
    content: public static implicit operator Result(Result<T> result)
    parameters:
    - id: result
      type: FlowRight.Core.Results.Result`1
      description: The generic result to convert.
    return:
      type: FlowRight.Core.Results.Result
      description: A non-generic <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> that preserves the success/failure state and error information.
    content.vb: Public Shared Widening Operator CType(result As Result(Of T)) As Result
  overload: FlowRight.Core.Results.Result`1.op_Implicit*
  nameWithType.vb: Result(Of T).CType(Result(Of T))
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType(FlowRight.Core.Results.Result(Of T))
  name.vb: CType(Result(Of T))
- uid: FlowRight.Core.Results.Result`1.op_Implicit(`0)~FlowRight.Core.Results.Result{`0}
  commentId: M:FlowRight.Core.Results.Result`1.op_Implicit(`0)~FlowRight.Core.Results.Result{`0}
  id: op_Implicit(`0)~FlowRight.Core.Results.Result{`0}
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: implicit operator Result<T>(T)
  nameWithType: Result<T>.implicit operator Result<T>(T)
  fullName: FlowRight.Core.Results.Result<T>.implicit operator FlowRight.Core.Results.Result<T>(T)
  type: Operator
  source:
    id: op_Implicit
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 169
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Implicitly converts a value of type <code class="typeparamref">T</code> to a successful <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    <p>

    This implicit conversion provides a convenient way to create successful results without

    explicitly calling <xref href="FlowRight.Core.Results.Result.Success%60%601(%60%600%2cFlowRight.Core.Results.ResultType)" data-throw-if-not-resolved="false"></xref>. It simplifies code

    when working with methods that return <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the value is already a <xref href="FlowRight.Core.Results.IResult%601" data-throw-if-not-resolved="false"></xref>, this conversion will extract the

    result information and create an appropriate <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> preserving the

    original result's success/failure state.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">public Result&lt;string&gt; GetMessage()

    {
        return "Hello, World!"; // Implicit conversion from string
    }


    public Result&lt;int&gt; Calculate()

    {
        return 42; // Implicit conversion from int
    }</code></pre>
  syntax:
    content: public static implicit operator Result<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to wrap in a successful result.
    return:
      type: FlowRight.Core.Results.Result`1
      description: A successful <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> containing the specified value.
    content.vb: Public Shared Widening Operator CType(value As T) As Result(Of T)
  overload: FlowRight.Core.Results.Result`1.op_Implicit*
  nameWithType.vb: Result(Of T).CType(T)
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType(T)
  name.vb: CType(T)
- uid: FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~`0
  commentId: M:FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~`0
  id: op_Explicit(FlowRight.Core.Results.Result{`0})~`0
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: explicit operator T(Result<T>)
  nameWithType: Result<T>.explicit operator T(Result<T>)
  fullName: FlowRight.Core.Results.Result<T>.explicit operator T(FlowRight.Core.Results.Result<T>)
  type: Operator
  source:
    id: op_Explicit
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 207
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Explicitly converts a <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> to its underlying value.
  remarks: >-
    <p>

    This explicit conversion provides a way to extract the value from a successful result.

    It will throw an exception if the result represents a failure, making it suitable for

    scenarios where you are certain the result is successful.

    </p>

    <p>

    For safer value extraction, consider using <xref href="FlowRight.Core.Results.Result%601.TryGetValue(%600%40)" data-throw-if-not-resolved="false"></xref> or

    <xref href="FlowRight.Core.Results.Result%601.Match%60%601(System.Func%7b%600%2c%60%600%7d%2cSystem.Func%7bSystem.String%2c%60%600%7d)" data-throw-if-not-resolved="false"></xref> instead.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;int&gt; result = GetNumber();


    if (result.IsSuccess)

    {
        int value = (int)result; // Explicit conversion
        Console.WriteLine($"The number is {value}");
    }</code></pre>
  syntax:
    content: public static explicit operator T(Result<T> result)
    parameters:
    - id: result
      type: FlowRight.Core.Results.Result`1
      description: The result to extract the value from.
    return:
      type: '{T}'
      description: The underlying value of the successful result.
    content.vb: Public Shared Narrowing Operator CType(result As Result(Of T)) As T
  overload: FlowRight.Core.Results.Result`1.op_Explicit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the result represents a failure state.
  nameWithType.vb: Result(Of T).CType(Result(Of T))
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType(FlowRight.Core.Results.Result(Of T))
  name.vb: CType(Result(Of T))
- uid: FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~System.Boolean
  commentId: M:FlowRight.Core.Results.Result`1.op_Explicit(FlowRight.Core.Results.Result{`0})~System.Boolean
  id: op_Explicit(FlowRight.Core.Results.Result{`0})~System.Boolean
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: explicit operator bool(Result<T>)
  nameWithType: Result<T>.explicit operator bool(Result<T>)
  fullName: FlowRight.Core.Results.Result<T>.explicit operator bool(FlowRight.Core.Results.Result<T>)
  type: Operator
  source:
    id: op_Explicit
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 237
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Explicitly converts a <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> to a boolean indicating success or failure.
  remarks: >-
    <p>

    This explicit conversion provides a convenient way to use results in boolean contexts

    while making the conversion explicit to avoid accidental usage.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;string&gt; result = GetMessage();


    if ((bool)result) // Explicit conversion

    {
        Console.WriteLine("Operation succeeded!");
    }</code></pre>
  syntax:
    content: public static explicit operator bool(Result<T> result)
    parameters:
    - id: result
      type: FlowRight.Core.Results.Result`1
      description: The result to convert.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents success; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Narrowing Operator CType(result As Result(Of T)) As Boolean
  overload: FlowRight.Core.Results.Result`1.op_Explicit*
  nameWithType.vb: Result(Of T).CType(Result(Of T))
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType(FlowRight.Core.Results.Result(Of T))
  name.vb: CType(Result(Of T))
- uid: FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  id: Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  nameWithType: Result<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>)
  type: Method
  source:
    id: Match
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 271
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Transforms this result into a value of type <code class="typeparamref">TResult</code> using pattern matching.
  remarks: >-
    <p>

    This is the primary pattern matching method for <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref>. It provides a functional

    approach to handling both success and failure cases by requiring explicit handling of both scenarios.

    </p>

    <p>

    This method treats all failure types (Error, Security, Validation, OperationCanceled) uniformly,

    calling <code class="paramref">onFailure</code> with the error message. For more granular failure handling,

    use the overload that provides separate handlers for each failure type.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; userResult = GetUser(userId);


    string message = userResult.Match(
        onSuccess: user =&gt; $"Welcome, {user.Name}!",
        onFailure: error =&gt; $"Failed to load user: {error}"
    );


    Console.WriteLine(message);</code></pre>
  syntax:
    content: public TResult Match<TResult>(Func<T, TResult> onSuccess, Func<string, TResult> onFailure)
    parameters:
    - id: onSuccess
      type: System.Func{{T},{TResult}}
      description: Function to execute if the result is successful. Receives the success value.
    - id: onFailure
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a failure. Receives the error message.
    typeParameters:
    - id: TResult
      description: The type of the result to return.
    return:
      type: '{TResult}'
      description: The value returned by either <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code>.
    content.vb: Public Function Match(Of TResult)(onSuccess As Func(Of T, TResult), onFailure As Func(Of String, TResult)) As TResult
  overload: FlowRight.Core.Results.Result`1.Match*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - FlowRight.Core.Results.IResult{{T}}.Match``1(System.Func{{T},{TResult}},System.Func{System.String,{TResult}})
  nameWithType.vb: Result(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
- uid: FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  id: Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  nameWithType: Result<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>, System.Func<string, TResult>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>, System.Func<string, TResult>)
  type: Method
  source:
    id: Match
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 321
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Transforms this result into a value of type <code class="typeparamref">TResult</code> using pattern matching with specific handlers for each failure type.
  remarks: >-
    <p>

    This overload of Match provides granular control over different failure types, allowing you to

    implement specific logic for each category of failure. This is particularly useful when different

    failure types require different handling strategies.

    </p>

    <p>

    The method routes failures to the appropriate handler based on <xref href="FlowRight.Core.Results.Result%601.FailureType" data-throw-if-not-resolved="false"></xref>:

    <ul><li><xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onError</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onSecurityException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onValidationException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onOperationCanceledException</code></li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; userResult = CreateUser(request);


    IActionResult response = userResult.Match(
        onSuccess: user =&gt; Ok(user),
        onError: error =&gt; StatusCode(500, error),
        onSecurityException: error =&gt; Unauthorized(error),
        onValidationException: errors =&gt; BadRequest(errors),
        onOperationCanceledException: error =&gt; StatusCode(408, "Request timeout")
    );</code></pre>
  syntax:
    content: public TResult Match<TResult>(Func<T, TResult> onSuccess, Func<string, TResult> onError, Func<string, TResult> onSecurityException, Func<IDictionary<string, string[]>, TResult> onValidationException, Func<string, TResult> onOperationCanceledException)
    parameters:
    - id: onSuccess
      type: System.Func{{T},{TResult}}
      description: Function to execute if the result is successful. Receives the success value.
    - id: onError
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a general error. Receives the error message.
    - id: onSecurityException
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a security failure. Receives the error message.
    - id: onValidationException
      type: System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}}
      description: Function to execute if the result is a validation failure. Receives the validation errors dictionary.
    - id: onOperationCanceledException
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a cancellation failure. Receives the error message.
    typeParameters:
    - id: TResult
      description: The type of the result to return.
    return:
      type: '{TResult}'
      description: The value returned by the appropriate handler function.
    content.vb: Public Function Match(Of TResult)(onSuccess As Func(Of T, TResult), onError As Func(Of String, TResult), onSecurityException As Func(Of String, TResult), onValidationException As Func(Of IDictionary(Of String, String()), TResult), onOperationCanceledException As Func(Of String, TResult)) As TResult
  overload: FlowRight.Core.Results.Result`1.Match*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when any of the handler functions is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - FlowRight.Core.Results.IResult{{T}}.Match``1(System.Func{{T},{TResult}},System.Func{System.String,{TResult}},System.Func{System.String,{TResult}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}},System.Func{System.String,{TResult}})
  nameWithType.vb: Result(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult), System.Func(Of String, TResult), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
- uid: FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  commentId: M:FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  id: Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Switch(Action<T>, Action<string>, bool)
  nameWithType: Result<T>.Switch(Action<T>, Action<string>, bool)
  fullName: FlowRight.Core.Results.Result<T>.Switch(System.Action<T>, System.Action<string>, bool)
  type: Method
  source:
    id: Switch
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 382
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Executes an action based on the result state using imperative pattern matching.
  remarks: >-
    <p>

    This is the primary imperative pattern matching method for <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref>. Unlike the functional

    <xref href="FlowRight.Core.Results.Result%601.Match%60%601(System.Func%7b%600%2c%60%600%7d%2cSystem.Func%7bSystem.String%2c%60%600%7d)" data-throw-if-not-resolved="false"></xref> method, this executes actions with side effects

    rather than returning transformed values.

    </p>

    <p>

    By default, <xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> failures are ignored because cancellation

    often represents normal flow control rather than an error condition. Set <code class="paramref">includeOperationCancelledFailures</code>

    to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if you need to handle cancellation scenarios.

    </p>

    <p>

    All other failure types (Error, Security, Validation) are handled uniformly by <code class="paramref">onFailure</code>.

    For more granular failure handling, use the overload that provides separate handlers for each failure type.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; userResult = GetUser(userId);


    userResult.Switch(
        onSuccess: user =&gt; {
            Console.WriteLine($"Welcome, {user.Name}!");
            LogUserLogin(user.Id);
        },
        onFailure: error =&gt; {
            Console.WriteLine($"Login failed: {error}");
            LogFailedLogin(userId);
        }
    );</code></pre>
  syntax:
    content: public void Switch(Action<T> onSuccess, Action<string> onFailure, bool includeOperationCancelledFailures = false)
    parameters:
    - id: onSuccess
      type: System.Action{{T}}
      description: Action to execute if the result is successful. Receives the success value.
    - id: onFailure
      type: System.Action{System.String}
      description: Action to execute if the result is a failure. Receives the error message.
    - id: includeOperationCancelledFailures
      type: System.Boolean
      description: Whether to execute <code class="paramref">onFailure</code> for <xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> failures. Defaults to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Sub Switch(onSuccess As Action(Of T), onFailure As Action(Of String), includeOperationCancelledFailures As Boolean = False)
  overload: FlowRight.Core.Results.Result`1.Switch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - FlowRight.Core.Results.IResult{{T}}.Switch(System.Action{{T}},System.Action{System.String},System.Boolean)
  nameWithType.vb: Result(Of T).Switch(Action(Of T), Action(Of String), Boolean)
  fullName.vb: FlowRight.Core.Results.Result(Of T).Switch(System.Action(Of T), System.Action(Of String), Boolean)
  name.vb: Switch(Action(Of T), Action(Of String), Boolean)
- uid: FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  commentId: M:FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  id: Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>?)
  nameWithType: Result<T>.Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>?)
  fullName: FlowRight.Core.Results.Result<T>.Switch(System.Action<T>, System.Action<string>, System.Action<string>, System.Action<System.Collections.Generic.IDictionary<string, string[]>>, System.Action<string>?)
  type: Method
  source:
    id: Switch
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 468
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Executes an action based on the result state using imperative pattern matching with specific handlers for each failure type.
  remarks: >-
    <p>

    This overload of Switch provides granular control over different failure types using imperative actions,

    allowing you to implement specific side effects for each category of failure. This is particularly useful

    when different failure types require different handling strategies (logging, notifications, etc.).

    </p>

    <p>

    The method routes failures to the appropriate handler based on <xref href="FlowRight.Core.Results.Result%601.FailureType" data-throw-if-not-resolved="false"></xref>:

    <ul><li><xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onError</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onSecurityException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onValidationException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onOperationCanceledException</code> (if provided)</li></ul>

    </p>

    <p>

    The <code class="paramref">onOperationCanceledException</code> parameter is optional because cancellation often

    represents normal flow control rather than an error condition that requires specific handling.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;Order&gt; orderResult = ProcessOrder(request);


    orderResult.Switch(
        onSuccess: order =&gt; {
            logger.LogInformation("Order {OrderId} processed successfully", order.Id);
            emailService.SendOrderConfirmation(order);
        },
        onError: error =&gt; {
            logger.LogError("Order processing failed: {Error}", error);
            alertService.NotifySystemError(error);
        },
        onSecurityException: error =&gt; {
            logger.LogWarning("Security violation during order processing: {Error}", error);
            auditService.LogSecurityEvent(error);
        },
        onValidationException: errors =&gt; {
            logger.LogInformation("Order validation failed: {ErrorCount} errors", errors.Count);
            // Validation errors are expected, no alerting needed
        },
        onOperationCanceledException: error =&gt; {
            logger.LogInformation("Order processing was cancelled: {Error}", error);
        }
    );</code></pre>
  syntax:
    content: public void Switch(Action<T> onSuccess, Action<string> onError, Action<string> onSecurityException, Action<IDictionary<string, string[]>> onValidationException, Action<string>? onOperationCanceledException = null)
    parameters:
    - id: onSuccess
      type: System.Action{{T}}
      description: Action to execute if the result is successful. Receives the success value.
    - id: onError
      type: System.Action{System.String}
      description: Action to execute if the result is a general error. Receives the error message.
    - id: onSecurityException
      type: System.Action{System.String}
      description: Action to execute if the result is a security failure. Receives the error message.
    - id: onValidationException
      type: System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
      description: Action to execute if the result is a validation failure. Receives the validation errors dictionary.
    - id: onOperationCanceledException
      type: System.Action{System.String}
      description: Optional action to execute if the result is a cancellation failure. Receives the error message. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, cancellation failures are ignored.
    content.vb: Public Sub Switch(onSuccess As Action(Of T), onError As Action(Of String), onSecurityException As Action(Of String), onValidationException As Action(Of IDictionary(Of String, String())), onOperationCanceledException As Action(Of String) = Nothing)
  overload: FlowRight.Core.Results.Result`1.Switch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code>, <code class="paramref">onError</code>, <code class="paramref">onSecurityException</code>, or <code class="paramref">onValidationException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - FlowRight.Core.Results.IResult{{T}}.Switch(System.Action{{T}},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  nameWithType.vb: Result(Of T).Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  fullName.vb: FlowRight.Core.Results.Result(Of T).Switch(System.Action(Of T), System.Action(Of String), System.Action(Of String), System.Action(Of System.Collections.Generic.IDictionary(Of String, String())), System.Action(Of String))
  name.vb: Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
- uid: FlowRight.Core.Results.Result`1.TryGetValue(`0@)
  commentId: M:FlowRight.Core.Results.Result`1.TryGetValue(`0@)
  id: TryGetValue(`0@)
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: TryGetValue(out T?)
  nameWithType: Result<T>.TryGetValue(out T?)
  fullName: FlowRight.Core.Results.Result<T>.TryGetValue(out T?)
  type: Method
  source:
    id: TryGetValue
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 554
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Attempts to retrieve the success value from this result.
  remarks: >-
    <p>

    This method provides a safe way to extract values from results using the standard .NET "Try" pattern,

    similar to <xref href="System.Collections.Generic.Dictionary%602.TryGetValue(%600%2c%601%40)" data-throw-if-not-resolved="false"></xref> or <xref href="System.Int32.TryParse(System.String%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The method uses the <xref href="System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" data-throw-if-not-resolved="false"></xref> attribute to help static analysis tools understand

    that <code class="paramref">value</code> will not be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> when the method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>,

    even for nullable reference types.

    </p>

    <p>

    This is particularly useful when you need to conditionally access the success value without

    pattern matching, or when integrating with code that expects the "Try" pattern.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; userResult = GetUser(userId);


    if (userResult.TryGetValue(out User user))

    {
        // user is guaranteed to be non-null here
        Console.WriteLine($"Found user: {user.Name}");
    }

    else

    {
        // Handle failure case
        Console.WriteLine($"Failed to get user: {userResult.Error}");
    }</code></pre>
  syntax:
    content: public bool TryGetValue(out T? value)
    parameters:
    - id: value
      type: '{T}'
      description: >-
        When this method returns, contains the success value if the result is successful; 

        otherwise, contains the default value for type <code class="typeparamref">T</code>.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result is successful and <code class="paramref">value</code> contains the success value; 

        otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function TryGetValue(value As T) As Boolean
  overload: FlowRight.Core.Results.Result`1.TryGetValue*
  nameWithType.vb: Result(Of T).TryGetValue(T)
  fullName.vb: FlowRight.Core.Results.Result(Of T).TryGetValue(T)
  name.vb: TryGetValue(T)
- uid: FlowRight.Core.Results.Result`1.Error
  commentId: P:FlowRight.Core.Results.Result`1.Error
  id: Error
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: Result<T>.Error
  fullName: FlowRight.Core.Results.Result<T>.Error
  type: Property
  source:
    id: Error
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 601
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the error message associated with this result.
  remarks: >-
    This property implements <xref href="FlowRight.Core.Results.IResultError%601.Error" data-throw-if-not-resolved="false"></xref> and provides the primary

    error message for the result. The content varies by failure type:

    <ul><li><strong>Success:</strong> Empty string</li><li><strong>General errors:</strong> The specific error message</li><li><strong>Validation errors:</strong> Formatted summary of all field errors</li><li><strong>Security errors:</strong> Security exception message</li><li><strong>Cancellation:</strong> Operation canceled message</li></ul>
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public string Error { get; }
    parameters: []
    return:
      type: System.String
      description: >-
        A string containing the error message for failed results, or an empty string for successful results.

        For validation failures, this contains a formatted summary of all validation errors.
    content.vb: >-
      <JsonInclude>

      Public Property [Error] As String
  overload: FlowRight.Core.Results.Result`1.Error*
  implements:
  - FlowRight.Core.Results.IResultError{System.String}.Error
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  nameWithType.vb: Result(Of T).Error
  fullName.vb: FlowRight.Core.Results.Result(Of T).Error
- uid: FlowRight.Core.Results.Result`1.Failures
  commentId: P:FlowRight.Core.Results.Result`1.Failures
  id: Failures
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: Failures
  nameWithType: Result<T>.Failures
  fullName: FlowRight.Core.Results.Result<T>.Failures
  type: Property
  source:
    id: Failures
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 618
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a dictionary of field-specific validation failures.
  remarks: >-
    This property provides detailed field-level error information for validation failures.

    It allows consumers to display specific error messages for individual form fields

    or properties. For non-validation failures, this dictionary is empty.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public IDictionary<string, string[]> Failures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: >-
        An <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> where keys represent field names and values

        represent arrays of error messages for each field. Empty for non-validation failures.
    content.vb: >-
      <JsonInclude>

      Public Property Failures As IDictionary(Of String, String())
  overload: FlowRight.Core.Results.Result`1.Failures*
  implements:
  - FlowRight.Core.Results.IResult.Failures
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  nameWithType.vb: Result(Of T).Failures
  fullName.vb: FlowRight.Core.Results.Result(Of T).Failures
- uid: FlowRight.Core.Results.Result`1.FailureType
  commentId: P:FlowRight.Core.Results.Result`1.FailureType
  id: FailureType
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: FailureType
  nameWithType: Result<T>.FailureType
  fullName: FlowRight.Core.Results.Result<T>.FailureType
  type: Property
  source:
    id: FailureType
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 633
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the specific type of failure that occurred.
  remarks: >-
    This property enables consumers to implement different handling strategies based on

    the type of failure. For example, validation failures might be displayed to users

    while security failures might be logged and result in access denial.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public ResultFailureType FailureType { get; }
    parameters: []
    return:
      type: FlowRight.Core.Results.ResultFailureType
      description: >-
        A <xref href="FlowRight.Core.Results.ResultFailureType" data-throw-if-not-resolved="false"></xref> value indicating the specific category of failure,

        or <xref href="FlowRight.Core.Results.ResultFailureType.None" data-throw-if-not-resolved="false"></xref> for successful results.
    content.vb: >-
      <JsonInclude>

      Public Property FailureType As ResultFailureType
  overload: FlowRight.Core.Results.Result`1.FailureType*
  implements:
  - FlowRight.Core.Results.IResult.FailureType
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  nameWithType.vb: Result(Of T).FailureType
  fullName.vb: FlowRight.Core.Results.Result(Of T).FailureType
- uid: FlowRight.Core.Results.Result`1.IsFailure
  commentId: P:FlowRight.Core.Results.Result`1.IsFailure
  id: IsFailure
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: IsFailure
  nameWithType: Result<T>.IsFailure
  fullName: FlowRight.Core.Results.Result<T>.IsFailure
  type: Property
  source:
    id: IsFailure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 646
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a value indicating whether this result represents a failure state.
  remarks: >-
    This property is determined by checking if an error message is present.

    It is always the logical inverse of <xref href="FlowRight.Core.Results.Result%601.IsSuccess" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsFailure { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents a failure; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsFailure As Boolean
  overload: FlowRight.Core.Results.Result`1.IsFailure*
  implements:
  - FlowRight.Core.Results.IResult.IsFailure
  nameWithType.vb: Result(Of T).IsFailure
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsFailure
- uid: FlowRight.Core.Results.Result`1.IsSuccess
  commentId: P:FlowRight.Core.Results.Result`1.IsSuccess
  id: IsSuccess
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: Result<T>.IsSuccess
  fullName: FlowRight.Core.Results.Result<T>.IsSuccess
  type: Property
  source:
    id: IsSuccess
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 659
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a value indicating whether this result represents a successful state.
  remarks: >-
    This property is determined by checking if no error message is present.

    It is always the logical inverse of <xref href="FlowRight.Core.Results.Result%601.IsFailure" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents success; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: FlowRight.Core.Results.Result`1.IsSuccess*
  implements:
  - FlowRight.Core.Results.IResult.IsSuccess
  nameWithType.vb: Result(Of T).IsSuccess
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsSuccess
- uid: FlowRight.Core.Results.Result`1.ResultType
  commentId: P:FlowRight.Core.Results.Result`1.ResultType
  id: ResultType
  parent: FlowRight.Core.Results.Result`1
  langs:
  - csharp
  - vb
  name: ResultType
  nameWithType: Result<T>.ResultType
  fullName: FlowRight.Core.Results.Result<T>.ResultType
  type: Property
  source:
    id: ResultType
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/ResultT.cs
    startLine: 673
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the general category of this result.
  remarks: >-
    This property provides high-level categorization that complements the more specific

    <xref href="FlowRight.Core.Results.Result%601.FailureType" data-throw-if-not-resolved="false"></xref>. It allows for broad categorization of results into

    success, informational, warning, or error states.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public ResultType ResultType { get; }
    parameters: []
    return:
      type: FlowRight.Core.Results.ResultType
      description: A <xref href="FlowRight.Core.Results.Result%601.ResultType" data-throw-if-not-resolved="false"></xref> value indicating the overall result category.
    content.vb: >-
      <JsonInclude>

      Public Property ResultType As ResultType
  overload: FlowRight.Core.Results.Result`1.ResultType*
  implements:
  - FlowRight.Core.Results.IResult.ResultType
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  nameWithType.vb: Result(Of T).ResultType
  fullName.vb: FlowRight.Core.Results.Result(Of T).ResultType
references:
- uid: FlowRight.Core.Results.Result
  commentId: T:FlowRight.Core.Results.Result
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.Result.html
  name: Result
  nameWithType: Result
  fullName: FlowRight.Core.Results.Result
- uid: FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  isExternal: true
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  nameWithType: Result<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>)
  nameWithType.vb: Result(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  commentId: M:FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  isExternal: true
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  name: Switch(Action<T>, Action<string>, bool)
  nameWithType: Result<T>.Switch(Action<T>, Action<string>, bool)
  fullName: FlowRight.Core.Results.Result<T>.Switch(System.Action<T>, System.Action<string>, bool)
  nameWithType.vb: Result(Of T).Switch(Action(Of T), Action(Of String), Boolean)
  fullName.vb: FlowRight.Core.Results.Result(Of T).Switch(System.Action(Of T), System.Action(Of String), Boolean)
  name.vb: Switch(Action(Of T), Action(Of String), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: FlowRight.Core.Results
  commentId: N:FlowRight.Core.Results
  href: FlowRight.html
  name: FlowRight.Core.Results
  nameWithType: FlowRight.Core.Results
  fullName: FlowRight.Core.Results
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: FlowRight.Core.Results.IResult{{T}}
  commentId: T:FlowRight.Core.Results.IResult{`0}
  parent: FlowRight.Core.Results
  definition: FlowRight.Core.Results.IResult`1
  href: FlowRight.Core.Results.IResult-1.html
  name: IResult<T>
  nameWithType: IResult<T>
  fullName: FlowRight.Core.Results.IResult<T>
  nameWithType.vb: IResult(Of T)
  fullName.vb: FlowRight.Core.Results.IResult(Of T)
  name.vb: IResult(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1
    name: IResult
    href: FlowRight.Core.Results.IResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1
    name: IResult
    href: FlowRight.Core.Results.IResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.IResult
  commentId: T:FlowRight.Core.Results.IResult
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.IResult.html
  name: IResult
  nameWithType: IResult
  fullName: FlowRight.Core.Results.IResult
- uid: FlowRight.Core.Results.IResultError{System.String}
  commentId: T:FlowRight.Core.Results.IResultError{System.String}
  parent: FlowRight.Core.Results
  definition: FlowRight.Core.Results.IResultError`1
  href: FlowRight.Core.Results.IResultError-1.html
  name: IResultError<string>
  nameWithType: IResultError<string>
  fullName: FlowRight.Core.Results.IResultError<string>
  nameWithType.vb: IResultError(Of String)
  fullName.vb: FlowRight.Core.Results.IResultError(Of String)
  name.vb: IResultError(Of String)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResultError`1
    name: IResultError
    href: FlowRight.Core.Results.IResultError-1.html
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.IResultError`1
    name: IResultError
    href: FlowRight.Core.Results.IResultError-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  name: MapAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MapAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MapAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MapAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}})
    name: MapAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}})
    name: MapAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  name: MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(System.Func{{T},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  name: MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(System.Func{{T},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  name: SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, bool)
  nameWithType: ResultAsyncExtensions.SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, bool)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, bool)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Boolean)
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), Boolean)
  name.vb: SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(System.Func{{T},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  name: SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  nameWithType: ResultAsyncExtensions.SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task))
  name.vb: SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(System.Func{{T},System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  name: ThenAsync<T>(Result<T>, Func<T, Task<Result>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T>(Result<T>, Func<T, Task<Result>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<FlowRight.Core.Results.Result>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T)(Result(Of T), Func(Of T, Task(Of Result)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result)))
  name.vb: ThenAsync(Of T)(Result(Of T), Func(Of T, Task(Of Result)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(System.Func{{T},System.Threading.Tasks.Task{FlowRight.Core.Results.Result{{TNext}}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  name: ThenAsync<T, TNext>(Result<T>, Func<T, Task<Result<TNext>>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T, TNext>(Result<T>, Func<T, Task<Result<TNext>>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T, TNext>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<FlowRight.Core.Results.Result<TNext>>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T, TNext)(Result(Of T), Func(Of T, Task(Of Result(Of TNext))))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T, TNext)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result(Of TNext))))
  name.vb: ThenAsync(Of T, TNext)(Result(Of T), Func(Of T, Task(Of Result(Of TNext))))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TNext
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: TNext
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{`0},System.Func{`0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TNext
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TNext
  - name: )
  - name: )
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FlowRight.Core.Results.IResult`1
  commentId: T:FlowRight.Core.Results.IResult`1
  href: FlowRight.Core.Results.IResult-1.html
  name: IResult<T>
  nameWithType: IResult<T>
  fullName: FlowRight.Core.Results.IResult<T>
  nameWithType.vb: IResult(Of T)
  fullName.vb: FlowRight.Core.Results.IResult(Of T)
  name.vb: IResult(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1
    name: IResult
    href: FlowRight.Core.Results.IResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1
    name: IResult
    href: FlowRight.Core.Results.IResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.IResultError`1
  commentId: T:FlowRight.Core.Results.IResultError`1
  href: FlowRight.Core.Results.IResultError-1.html
  name: IResultError<T>
  nameWithType: IResultError<T>
  fullName: FlowRight.Core.Results.IResultError<T>
  nameWithType.vb: IResultError(Of T)
  fullName.vb: FlowRight.Core.Results.IResultError(Of T)
  name.vb: IResultError(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResultError`1
    name: IResultError
    href: FlowRight.Core.Results.IResultError-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.IResultError`1
    name: IResultError
    href: FlowRight.Core.Results.IResultError-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  name: MapAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MapAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MapAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MapAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
    name: MapAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MapAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
    name: MapAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MapAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions
  commentId: T:FlowRight.Core.Extensions.ResultAsyncExtensions
  parent: FlowRight.Core.Extensions
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html
  name: ResultAsyncExtensions
  nameWithType: ResultAsyncExtensions
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  name: MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  name: MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<T, TResult>(Result<T>, Func<T, Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<T, TResult>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of T, TResult)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of T, TResult)(Result(Of T), Func(Of T, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``1}},System.Func{System.String,System.Threading.Tasks.Task{``1}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___1___System_Func_System_String_System_Threading_Tasks_Task___1___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  name: SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, bool)
  nameWithType: ResultAsyncExtensions.SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, bool)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, bool)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Boolean)
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), Boolean)
  name.vb: SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  name: SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  nameWithType: ResultAsyncExtensions.SwitchAsync<T>(Result<T>, Func<T, Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task))
  name.vb: SwitchAsync(Of T)(Result(Of T), Func(Of T, Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  name: ThenAsync<T>(Result<T>, Func<T, Task<Result>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T>(Result<T>, Func<T, Task<Result>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<FlowRight.Core.Results.Result>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T)(Result(Of T), Func(Of T, Task(Of Result)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result)))
  name.vb: ThenAsync(Of T)(Result(Of T), Func(Of T, Task(Of Result)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  name: ThenAsync<T, TNext>(Result<T>, Func<T, Task<Result<TNext>>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T, TNext>(Result<T>, Func<T, Task<Result<TNext>>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T, TNext>(FlowRight.Core.Results.Result<T>, System.Func<T, System.Threading.Tasks.Task<FlowRight.Core.Results.Result<TNext>>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T, TNext)(Result(Of T), Func(Of T, Task(Of Result(Of TNext))))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T, TNext)(FlowRight.Core.Results.Result(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result(Of TNext))))
  name.vb: ThenAsync(Of T, TNext)(Result(Of T), Func(Of T, Task(Of Result(Of TNext))))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TNext
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: TNext
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``2(FlowRight.Core.Results.Result{``0},System.Func{``0,System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``1}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__2_FlowRight_Core_Results_Result___0__System_Func___0_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___1____
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TNext
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TNext
  - name: )
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions
  commentId: N:FlowRight.Core.Extensions
  href: FlowRight.html
  name: FlowRight.Core.Extensions
  nameWithType: FlowRight.Core.Extensions
  fullName: FlowRight.Core.Extensions
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Extensions
    name: Extensions
    href: FlowRight.Core.Extensions.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Extensions
    name: Extensions
    href: FlowRight.Core.Extensions.html
- uid: FlowRight.Core.Results.Result`1
  commentId: T:FlowRight.Core.Results.Result`1
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.Result`1.op_Implicit*
  commentId: Overload:FlowRight.Core.Results.Result`1.op_Implicit
  name: implicit operator
  nameWithType: Result<T>.implicit operator
  fullName: FlowRight.Core.Results.Result<T>.implicit operator
  nameWithType.vb: Result(Of T).CType
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  commentId: M:FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  name: Success<T>(T, ResultType)
  nameWithType: Result.Success<T>(T, ResultType)
  fullName: FlowRight.Core.Results.Result.Success<T>(T, FlowRight.Core.Results.ResultType)
  nameWithType.vb: Result.Success(Of T)(T, ResultType)
  fullName.vb: FlowRight.Core.Results.Result.Success(Of T)(T, FlowRight.Core.Results.ResultType)
  name.vb: Success(Of T)(T, ResultType)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
    name: Success
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: FlowRight.Core.Results.ResultType
    name: ResultType
    href: FlowRight.Core.Results.ResultType.html
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
    name: Success
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: FlowRight.Core.Results.ResultType
    name: ResultType
    href: FlowRight.Core.Results.ResultType.html
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: FlowRight.Core.Results.Result`1.TryGetValue(`0@)
  commentId: M:FlowRight.Core.Results.Result`1.TryGetValue(`0@)
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_TryGetValue__0__
  name: TryGetValue(out T)
  nameWithType: Result<T>.TryGetValue(out T)
  fullName: FlowRight.Core.Results.Result<T>.TryGetValue(out T)
  nameWithType.vb: Result(Of T).TryGetValue(T)
  fullName.vb: FlowRight.Core.Results.Result(Of T).TryGetValue(T)
  name.vb: TryGetValue(T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1.TryGetValue(`0@)
    name: TryGetValue
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_TryGetValue__0__
  - name: (
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1.TryGetValue(`0@)
    name: TryGetValue
    href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_TryGetValue__0__
  - name: (
  - name: T
  - name: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: FlowRight.Core.Results.Result`1.op_Explicit*
  commentId: Overload:FlowRight.Core.Results.Result`1.op_Explicit
  name: explicit operator
  nameWithType: Result<T>.explicit operator
  fullName: FlowRight.Core.Results.Result<T>.explicit operator
  nameWithType.vb: Result(Of T).CType
  fullName.vb: FlowRight.Core.Results.Result(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: FlowRight.Core.Results.Result`1.Match*
  commentId: Overload:FlowRight.Core.Results.Result`1.Match
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  name: Match
  nameWithType: Result<T>.Match
  fullName: FlowRight.Core.Results.Result<T>.Match
  nameWithType.vb: Result(Of T).Match
  fullName.vb: FlowRight.Core.Results.Result(Of T).Match
- uid: FlowRight.Core.Results.IResult{{T}}.Match``1(System.Func{{T},{TResult}},System.Func{System.String,{TResult}})
  commentId: M:FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.IResult{{T}}
  definition: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  nameWithType: IResult<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.IResult<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>)
  nameWithType.vb: IResult(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Func{{T},{TResult}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.String,{TResult}}
  commentId: T:System.Func{System.String,``0}
  parent: System
  definition: System.Func`2
  name: Func<string, TResult>
  nameWithType: Func<string, TResult>
  fullName: System.Func<string, TResult>
  nameWithType.vb: Func(Of String, TResult)
  fullName.vb: System.Func(Of String, TResult)
  name.vb: Func(Of String, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
  isExternal: true
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  nameWithType: IResult<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.IResult<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>)
  nameWithType.vb: IResult(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: FlowRight.Core.Results.Result`1.FailureType
  commentId: P:FlowRight.Core.Results.Result`1.FailureType
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_FailureType
  name: FailureType
  nameWithType: Result<T>.FailureType
  fullName: FlowRight.Core.Results.Result<T>.FailureType
  nameWithType.vb: Result(Of T).FailureType
  fullName.vb: FlowRight.Core.Results.Result(Of T).FailureType
- uid: FlowRight.Core.Results.ResultFailureType.Error
  commentId: F:FlowRight.Core.Results.ResultFailureType.Error
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Error
  name: Error
  nameWithType: ResultFailureType.Error
  fullName: FlowRight.Core.Results.ResultFailureType.Error
- uid: FlowRight.Core.Results.ResultFailureType.Security
  commentId: F:FlowRight.Core.Results.ResultFailureType.Security
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Security
  name: Security
  nameWithType: ResultFailureType.Security
  fullName: FlowRight.Core.Results.ResultFailureType.Security
- uid: FlowRight.Core.Results.ResultFailureType.Validation
  commentId: F:FlowRight.Core.Results.ResultFailureType.Validation
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Validation
  name: Validation
  nameWithType: ResultFailureType.Validation
  fullName: FlowRight.Core.Results.ResultFailureType.Validation
- uid: FlowRight.Core.Results.ResultFailureType.OperationCanceled
  commentId: F:FlowRight.Core.Results.ResultFailureType.OperationCanceled
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_OperationCanceled
  name: OperationCanceled
  nameWithType: ResultFailureType.OperationCanceled
  fullName: FlowRight.Core.Results.ResultFailureType.OperationCanceled
- uid: FlowRight.Core.Results.IResult{{T}}.Match``1(System.Func{{T},{TResult}},System.Func{System.String,{TResult}},System.Func{System.String,{TResult}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}},System.Func{System.String,{TResult}})
  commentId: M:FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.IResult{{T}}
  definition: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  nameWithType: IResult<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.IResult<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>, System.Func<string, TResult>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>, System.Func<string, TResult>)
  nameWithType.vb: IResult(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult), System.Func(Of String, TResult), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult{`0}.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}}
  commentId: T:System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0}
  parent: System
  definition: System.Func`2
  name: Func<IDictionary<string, string[]>, TResult>
  nameWithType: Func<IDictionary<string, string[]>, TResult>
  fullName: System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>
  nameWithType.vb: Func(Of IDictionary(Of String, String()), TResult)
  fullName.vb: System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult)
  name.vb: Func(Of IDictionary(Of String, String()), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  isExternal: true
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  name: Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  nameWithType: IResult<T>.Match<TResult>(Func<T, TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.IResult<T>.Match<TResult>(System.Func<T, TResult>, System.Func<string, TResult>, System.Func<string, TResult>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>, System.Func<string, TResult>)
  nameWithType.vb: IResult(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Match(Of TResult)(System.Func(Of T, TResult), System.Func(Of String, TResult), System.Func(Of String, TResult), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Match__1_System_Func__0___0__System_Func_System_String___0__System_Func_System_String___0__System_Func_System_Collections_Generic_IDictionary_System_String_System_String______0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result`1.Switch*
  commentId: Overload:FlowRight.Core.Results.Result`1.Switch
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  name: Switch
  nameWithType: Result<T>.Switch
  fullName: FlowRight.Core.Results.Result<T>.Switch
  nameWithType.vb: Result(Of T).Switch
  fullName.vb: FlowRight.Core.Results.Result(Of T).Switch
- uid: FlowRight.Core.Results.IResult{{T}}.Switch(System.Action{{T}},System.Action{System.String},System.Boolean)
  commentId: M:FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  parent: FlowRight.Core.Results.IResult{{T}}
  definition: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  name: Switch(Action<T>, Action<string>, bool)
  nameWithType: IResult<T>.Switch(Action<T>, Action<string>, bool)
  fullName: FlowRight.Core.Results.IResult<T>.Switch(System.Action<T>, System.Action<string>, bool)
  nameWithType.vb: IResult(Of T).Switch(Action(Of T), Action(Of String), Boolean)
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Switch(System.Action(Of T), System.Action(Of String), Boolean)
  name.vb: Switch(Action(Of T), Action(Of String), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  commentId: M:FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
  isExternal: true
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  name: Switch(Action<T>, Action<string>, bool)
  nameWithType: IResult<T>.Switch(Action<T>, Action<string>, bool)
  fullName: FlowRight.Core.Results.IResult<T>.Switch(System.Action<T>, System.Action<string>, bool)
  nameWithType.vb: IResult(Of T).Switch(Action(Of T), Action(Of String), Boolean)
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Switch(System.Action(Of T), System.Action(Of String), Boolean)
  name.vb: Switch(Action(Of T), Action(Of String), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Boolean)
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Boolean_
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.IResult{{T}}.Switch(System.Action{{T}},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  commentId: M:FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  parent: FlowRight.Core.Results.IResult{{T}}
  definition: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  name: Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>)
  nameWithType: IResult<T>.Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>)
  fullName: FlowRight.Core.Results.IResult<T>.Switch(System.Action<T>, System.Action<string>, System.Action<string>, System.Action<System.Collections.Generic.IDictionary<string, string[]>>, System.Action<string>)
  nameWithType.vb: IResult(Of T).Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Switch(System.Action(Of T), System.Action(Of String), System.Action(Of String), System.Action(Of System.Collections.Generic.IDictionary(Of String, String())), System.Action(Of String))
  name.vb: Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult{`0}.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
- uid: System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
  commentId: T:System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
  parent: System
  definition: System.Action`1
  name: Action<IDictionary<string, string[]>>
  nameWithType: Action<IDictionary<string, string[]>>
  fullName: System.Action<System.Collections.Generic.IDictionary<string, string[]>>
  nameWithType.vb: Action(Of IDictionary(Of String, String()))
  fullName.vb: System.Action(Of System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Action(Of IDictionary(Of String, String()))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  commentId: M:FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  isExternal: true
  href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  name: Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>)
  nameWithType: IResult<T>.Switch(Action<T>, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>)
  fullName: FlowRight.Core.Results.IResult<T>.Switch(System.Action<T>, System.Action<string>, System.Action<string>, System.Action<System.Collections.Generic.IDictionary<string, string[]>>, System.Action<string>)
  nameWithType.vb: IResult(Of T).Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  fullName.vb: FlowRight.Core.Results.IResult(Of T).Switch(System.Action(Of T), System.Action(Of String), System.Action(Of String), System.Action(Of System.Collections.Generic.IDictionary(Of String, String())), System.Action(Of String))
  name.vb: Switch(Action(Of T), Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  spec.csharp:
  - uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.IResult`1.Switch(System.Action{`0},System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
    name: Switch
    href: FlowRight.Core.Results.IResult-1.html#FlowRight_Core_Results_IResult_1_Switch_System_Action__0__System_Action_System_String__System_Action_System_String__System_Action_System_Collections_Generic_IDictionary_System_String_System_String_____System_Action_System_String__
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, out TValue)
  nameWithType: Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Int32.TryParse(System.String,System.Int32@)
  commentId: M:System.Int32.TryParse(System.String,System.Int32@)
  isExternal: true
  name: TryParse(string, out int)
  nameWithType: int.TryParse(string, out int)
  fullName: int.TryParse(string, out int)
  nameWithType.vb: Integer.TryParse(String, Integer)
  fullName.vb: Integer.TryParse(String, Integer)
  name.vb: TryParse(String, Integer)
  spec.csharp:
  - uid: System.Int32.TryParse(System.String,System.Int32@)
    name: TryParse
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Int32.TryParse(System.String,System.Int32@)
    name: TryParse
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Diagnostics.CodeAnalysis.NotNullWhenAttribute
  commentId: T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute
  isExternal: true
  name: NotNullWhenAttribute
  nameWithType: NotNullWhenAttribute
  fullName: System.Diagnostics.CodeAnalysis.NotNullWhenAttribute
- uid: FlowRight.Core.Results.Result`1.TryGetValue*
  commentId: Overload:FlowRight.Core.Results.Result`1.TryGetValue
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_TryGetValue__0__
  name: TryGetValue
  nameWithType: Result<T>.TryGetValue
  fullName: FlowRight.Core.Results.Result<T>.TryGetValue
  nameWithType.vb: Result(Of T).TryGetValue
  fullName.vb: FlowRight.Core.Results.Result(Of T).TryGetValue
- uid: FlowRight.Core.Results.IResultError`1.Error
  commentId: P:FlowRight.Core.Results.IResultError`1.Error
  href: FlowRight.Core.Results.IResultError-1.html#FlowRight_Core_Results_IResultError_1_Error
  name: Error
  nameWithType: IResultError<T>.Error
  fullName: FlowRight.Core.Results.IResultError<T>.Error
  nameWithType.vb: IResultError(Of T).Error
  fullName.vb: FlowRight.Core.Results.IResultError(Of T).Error
- uid: FlowRight.Core.Results.Result`1.Error*
  commentId: Overload:FlowRight.Core.Results.Result`1.Error
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Error
  name: Error
  nameWithType: Result<T>.Error
  fullName: FlowRight.Core.Results.Result<T>.Error
  nameWithType.vb: Result(Of T).Error
  fullName.vb: FlowRight.Core.Results.Result(Of T).Error
- uid: FlowRight.Core.Results.IResultError{System.String}.Error
  commentId: P:FlowRight.Core.Results.IResultError{System.String}.Error
  parent: FlowRight.Core.Results.IResultError{System.String}
  definition: FlowRight.Core.Results.IResultError`1.Error
  href: FlowRight.Core.Results.IResultError-1.html#FlowRight_Core_Results_IResultError_1_Error
  name: Error
  nameWithType: IResultError<string>.Error
  fullName: FlowRight.Core.Results.IResultError<string>.Error
  nameWithType.vb: IResultError(Of String).Error
  fullName.vb: FlowRight.Core.Results.IResultError(Of String).Error
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: FlowRight.Core.Results.Result`1.Failures*
  commentId: Overload:FlowRight.Core.Results.Result`1.Failures
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_Failures
  name: Failures
  nameWithType: Result<T>.Failures
  fullName: FlowRight.Core.Results.Result<T>.Failures
  nameWithType.vb: Result(Of T).Failures
  fullName.vb: FlowRight.Core.Results.Result(Of T).Failures
- uid: FlowRight.Core.Results.IResult.Failures
  commentId: P:FlowRight.Core.Results.IResult.Failures
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_Failures
  name: Failures
  nameWithType: IResult.Failures
  fullName: FlowRight.Core.Results.IResult.Failures
- uid: System.Collections.Generic.IDictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<string, string[]>
  nameWithType: IDictionary<string, string[]>
  fullName: System.Collections.Generic.IDictionary<string, string[]>
  nameWithType.vb: IDictionary(Of String, String())
  fullName.vb: System.Collections.Generic.IDictionary(Of String, String())
  name.vb: IDictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: FlowRight.Core.Results.ResultFailureType
  commentId: T:FlowRight.Core.Results.ResultFailureType
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.ResultFailureType.html
  name: ResultFailureType
  nameWithType: ResultFailureType
  fullName: FlowRight.Core.Results.ResultFailureType
- uid: FlowRight.Core.Results.ResultFailureType.None
  commentId: F:FlowRight.Core.Results.ResultFailureType.None
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_None
  name: None
  nameWithType: ResultFailureType.None
  fullName: FlowRight.Core.Results.ResultFailureType.None
- uid: FlowRight.Core.Results.Result`1.FailureType*
  commentId: Overload:FlowRight.Core.Results.Result`1.FailureType
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_FailureType
  name: FailureType
  nameWithType: Result<T>.FailureType
  fullName: FlowRight.Core.Results.Result<T>.FailureType
  nameWithType.vb: Result(Of T).FailureType
  fullName.vb: FlowRight.Core.Results.Result(Of T).FailureType
- uid: FlowRight.Core.Results.IResult.FailureType
  commentId: P:FlowRight.Core.Results.IResult.FailureType
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_FailureType
  name: FailureType
  nameWithType: IResult.FailureType
  fullName: FlowRight.Core.Results.IResult.FailureType
- uid: FlowRight.Core.Results.Result`1.IsSuccess
  commentId: P:FlowRight.Core.Results.Result`1.IsSuccess
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_IsSuccess
  name: IsSuccess
  nameWithType: Result<T>.IsSuccess
  fullName: FlowRight.Core.Results.Result<T>.IsSuccess
  nameWithType.vb: Result(Of T).IsSuccess
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsSuccess
- uid: FlowRight.Core.Results.Result`1.IsFailure*
  commentId: Overload:FlowRight.Core.Results.Result`1.IsFailure
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_IsFailure
  name: IsFailure
  nameWithType: Result<T>.IsFailure
  fullName: FlowRight.Core.Results.Result<T>.IsFailure
  nameWithType.vb: Result(Of T).IsFailure
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsFailure
- uid: FlowRight.Core.Results.IResult.IsFailure
  commentId: P:FlowRight.Core.Results.IResult.IsFailure
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_IsFailure
  name: IsFailure
  nameWithType: IResult.IsFailure
  fullName: FlowRight.Core.Results.IResult.IsFailure
- uid: FlowRight.Core.Results.Result`1.IsFailure
  commentId: P:FlowRight.Core.Results.Result`1.IsFailure
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_IsFailure
  name: IsFailure
  nameWithType: Result<T>.IsFailure
  fullName: FlowRight.Core.Results.Result<T>.IsFailure
  nameWithType.vb: Result(Of T).IsFailure
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsFailure
- uid: FlowRight.Core.Results.Result`1.IsSuccess*
  commentId: Overload:FlowRight.Core.Results.Result`1.IsSuccess
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_IsSuccess
  name: IsSuccess
  nameWithType: Result<T>.IsSuccess
  fullName: FlowRight.Core.Results.Result<T>.IsSuccess
  nameWithType.vb: Result(Of T).IsSuccess
  fullName.vb: FlowRight.Core.Results.Result(Of T).IsSuccess
- uid: FlowRight.Core.Results.IResult.IsSuccess
  commentId: P:FlowRight.Core.Results.IResult.IsSuccess
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_IsSuccess
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: FlowRight.Core.Results.IResult.IsSuccess
- uid: FlowRight.Core.Results.Result`1.ResultType
  commentId: P:FlowRight.Core.Results.Result`1.ResultType
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_ResultType
  name: ResultType
  nameWithType: Result<T>.ResultType
  fullName: FlowRight.Core.Results.Result<T>.ResultType
  nameWithType.vb: Result(Of T).ResultType
  fullName.vb: FlowRight.Core.Results.Result(Of T).ResultType
- uid: FlowRight.Core.Results.Result`1.ResultType*
  commentId: Overload:FlowRight.Core.Results.Result`1.ResultType
  href: FlowRight.Core.Results.Result-1.html#FlowRight_Core_Results_Result_1_ResultType
  name: ResultType
  nameWithType: Result<T>.ResultType
  fullName: FlowRight.Core.Results.Result<T>.ResultType
  nameWithType.vb: Result(Of T).ResultType
  fullName.vb: FlowRight.Core.Results.Result(Of T).ResultType
- uid: FlowRight.Core.Results.IResult.ResultType
  commentId: P:FlowRight.Core.Results.IResult.ResultType
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_ResultType
  name: ResultType
  nameWithType: IResult.ResultType
  fullName: FlowRight.Core.Results.IResult.ResultType
- uid: FlowRight.Core.Results.ResultType
  commentId: T:FlowRight.Core.Results.ResultType
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.ResultType.html
  name: ResultType
  nameWithType: ResultType
  fullName: FlowRight.Core.Results.ResultType
