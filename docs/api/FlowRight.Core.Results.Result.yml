### YamlMime:ManagedReference
items:
- uid: FlowRight.Core.Results.Result
  commentId: T:FlowRight.Core.Results.Result
  id: Result
  parent: FlowRight.Core.Results
  children:
  - FlowRight.Core.Results.Result.Combine(FlowRight.Core.Results.Result[])
  - FlowRight.Core.Results.Result.Combine``1(FlowRight.Core.Results.Result{``0}[])
  - FlowRight.Core.Results.Result.Error
  - FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  - FlowRight.Core.Results.Result.Failure(System.OperationCanceledException)
  - FlowRight.Core.Results.Result.Failure(System.Security.SecurityException)
  - FlowRight.Core.Results.Result.Failure(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  - FlowRight.Core.Results.Result.Failure(System.String,System.String)
  - FlowRight.Core.Results.Result.FailureType
  - FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  - FlowRight.Core.Results.Result.Failure``1(System.OperationCanceledException)
  - FlowRight.Core.Results.Result.Failure``1(System.Security.SecurityException)
  - FlowRight.Core.Results.Result.Failure``1(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  - FlowRight.Core.Results.Result.Failure``1(System.String,System.String)
  - FlowRight.Core.Results.Result.Failures
  - FlowRight.Core.Results.Result.IsFailure
  - FlowRight.Core.Results.Result.IsSuccess
  - FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
  - FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  - FlowRight.Core.Results.Result.NotFound(System.String)
  - FlowRight.Core.Results.Result.NotFound``1(System.String)
  - FlowRight.Core.Results.Result.ResultType
  - FlowRight.Core.Results.Result.ServerError(System.String)
  - FlowRight.Core.Results.Result.ServerError``1(System.String)
  - FlowRight.Core.Results.Result.Success(FlowRight.Core.Results.ResultType)
  - FlowRight.Core.Results.Result.SuccessOrNull``1(``0,FlowRight.Core.Results.ResultType)
  - FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  - FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  - FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Boolean)
  - FlowRight.Core.Results.Result.ValidationFailure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  - FlowRight.Core.Results.Result.ValidationFailure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  - FlowRight.Core.Results.Result.op_Explicit(FlowRight.Core.Results.Result)~System.Boolean
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: Result
  fullName: FlowRight.Core.Results.Result
  type: Class
  source:
    id: Result
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Success.cs
    startLine: 2
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: >-
    Provides a non-generic Result implementation that represents the outcome of operations

    that don't return a value, supporting both success and failure states with detailed error information.
  remarks: >-
    <p>

    This class implements the Result pattern for operations that perform actions but don't return

    a specific value (similar to void methods). It provides comprehensive error tracking,

    categorization of different failure types, and full JSON serialization support.

    </p>

    <p>

    The Result class is designed to be immutable after construction and supports

    both simple success/failure scenarios and complex error handling with validation failures,

    security exceptions, and operation cancellation.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Creating success results

    Result successResult = Result.Success();

    Result infoResult = Result.Success(ResultType.Information);


    // Creating failure results

    Result errorResult = Result.Failure("Operation failed");

    Result validationResult = Result.ValidationFailure(validationErrors);

    Result securityResult = Result.SecurityFailure("Access denied");


    // Pattern matching with results

    string message = result.Match(
        onSuccess: () =&gt; "Operation completed successfully",
        onFailure: error =&gt; $"Operation failed: {error}"
    );</code></pre>
  syntax:
    content: 'public class Result : IResult'
    content.vb: Public Class Result Implements IResult
  inheritance:
  - System.Object
  implements:
  - FlowRight.Core.Results.IResult
  extensionMethods:
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  - FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{{T}}}})
- uid: FlowRight.Core.Results.Result.Failure(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  commentId: M:FlowRight.Core.Results.Result.Failure(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  id: Failure(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure(string, ResultType, ResultFailureType)
  nameWithType: Result.Failure(string, ResultType, ResultFailureType)
  fullName: FlowRight.Core.Results.Result.Failure(string, FlowRight.Core.Results.ResultType, FlowRight.Core.Results.ResultFailureType)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 39
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with the specified error message and failure classification.
  remarks: >-
    <p>

    This is the primary method for creating general failure results. It allows full control

    over both the result type and failure type classifications, enabling precise error categorization.

    </p>

    <p>

    Use this method when you need to create custom failure scenarios that don't fit the

    specialized failure methods (validation, security, cancellation).

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Basic error

    Result result = Result.Failure("Database connection failed");


    // Business logic error

    Result businessError = Result.Failure(
        "Insufficient inventory for order", 
        ResultType.Error, 
        ResultFailureType.Error
    );</code></pre>
  syntax:
    content: public static Result Failure(string error, ResultType resultType = ResultType.Error, ResultFailureType resultFailureType = ResultFailureType.Error)
    parameters:
    - id: error
      type: System.String
      description: The error message describing what went wrong. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: resultType
      type: FlowRight.Core.Results.ResultType
      description: The general result type classification. Defaults to <xref href="FlowRight.Core.Results.ResultType.Error" data-throw-if-not-resolved="false"></xref>.
    - id: resultFailureType
      type: FlowRight.Core.Results.ResultFailureType
      description: The specific failure type classification. Defaults to <xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance containing the error information.
    content.vb: Public Shared Function Failure([error] As String, resultType As ResultType = ResultType.Error, resultFailureType As ResultFailureType = ResultFailureType.Error) As Result
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">error</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(String, ResultType, ResultFailureType)
  fullName.vb: FlowRight.Core.Results.Result.Failure(String, FlowRight.Core.Results.ResultType, FlowRight.Core.Results.ResultFailureType)
  name.vb: Failure(String, ResultType, ResultFailureType)
- uid: FlowRight.Core.Results.Result.Failure(System.String,System.String)
  commentId: M:FlowRight.Core.Results.Result.Failure(System.String,System.String)
  id: Failure(System.String,System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure(string, string)
  nameWithType: Result.Failure(string, string)
  fullName: FlowRight.Core.Results.Result.Failure(string, string)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 72
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with a single field validation error.
  remarks: >-
    <p>

    This method creates a validation failure result for a single field. The resulting failure

    will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> and

    the field error will be available in the <xref href="FlowRight.Core.Results.Result.Failures" data-throw-if-not-resolved="false"></xref> dictionary.

    </p>

    <p>

    This is useful for simple validation scenarios where only one field needs to be validated

    or when building up validation errors one at a time.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Single field validation error

    Result emailError = Result.Failure("Email", "Email address is required");


    // The error will be available in Failures dictionary

    if (emailError.FailureType == ResultFailureType.Validation)

    {
        string[] emailErrors = emailError.Failures["Email"];
    }</code></pre>
  syntax:
    content: public static Result Failure(string key, string error)
    parameters:
    - id: key
      type: System.String
      description: The name of the field or property that failed validation. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: error
      type: System.String
      description: The validation error message for the specified field. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing the field error.
    content.vb: Public Shared Function Failure(key As String, [error] As String) As Result
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">key</code> or <code class="paramref">error</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(String, String)
  fullName.vb: FlowRight.Core.Results.Result.Failure(String, String)
  name.vb: Failure(String, String)
- uid: FlowRight.Core.Results.Result.Failure(System.Security.SecurityException)
  commentId: M:FlowRight.Core.Results.Result.Failure(System.Security.SecurityException)
  id: Failure(System.Security.SecurityException)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure(SecurityException)
  nameWithType: Result.Failure(SecurityException)
  fullName: FlowRight.Core.Results.Result.Failure(System.Security.SecurityException)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 107
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result from a security exception.
  remarks: >-
    <p>

    This method creates a security failure result from a <xref href="System.Security.SecurityException" data-throw-if-not-resolved="false"></xref>.

    The resulting failure will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref>

    and should be handled with appropriate security considerations.

    </p>

    <p>

    Security failures typically require special handling such as audit logging,

    security monitoring integration, and careful error message sanitization to avoid

    information disclosure.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">try

    {
        // Some operation that might throw SecurityException
        PerformSecuritySensitiveOperation();
        return Result.Success();
    }

    catch (SecurityException ex)

    {
        return Result.Failure(ex);
    }</code></pre>
  syntax:
    content: public static Result Failure(SecurityException securityException)
    parameters:
    - id: securityException
      type: System.Security.SecurityException
      description: The security exception that occurred. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> containing the security error.
    content.vb: Public Shared Function Failure(securityException As SecurityException) As Result
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">securityException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
- uid: FlowRight.Core.Results.Result.Failure(System.OperationCanceledException)
  commentId: M:FlowRight.Core.Results.Result.Failure(System.OperationCanceledException)
  id: Failure(System.OperationCanceledException)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure(OperationCanceledException)
  nameWithType: Result.Failure(OperationCanceledException)
  fullName: FlowRight.Core.Results.Result.Failure(System.OperationCanceledException)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 143
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result from an operation canceled exception.
  remarks: >-
    <p>

    This method creates a cancellation failure result from an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref>.

    The resulting failure will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref>

    and a <xref href="FlowRight.Core.Results.Result.ResultType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultType.Warning" data-throw-if-not-resolved="false"></xref>, as cancellation is typically not an error condition.

    </p>

    <p>

    Cancellation failures represent normal application flow control rather than actual errors

    and may be handled differently from other failure types (such as being filtered out of error logging).

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">async Task&lt;Result&gt; ProcessDataAsync(CancellationToken cancellationToken)

    {
        try
        {
            await LongRunningOperation(cancellationToken);
            return Result.Success();
        }
        catch (OperationCanceledException ex)
        {
            return Result.Failure(ex);
        }
    }</code></pre>
  syntax:
    content: public static Result Failure(OperationCanceledException operationCanceledException)
    parameters:
    - id: operationCanceledException
      type: System.OperationCanceledException
      description: The operation canceled exception that occurred. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> containing the cancellation information.
    content.vb: Public Shared Function Failure(operationCanceledException As OperationCanceledException) As Result
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">operationCanceledException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
- uid: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  id: Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure(IDictionary<string, string[]>)
  nameWithType: Result.Failure(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary<string, string[]>)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 185
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with multiple validation errors.
  remarks: >-
    <p>

    This method creates a validation failure result containing multiple field errors.

    It's the primary method for creating comprehensive validation failures that can

    report errors on multiple fields simultaneously.

    </p>

    <p>

    The error dictionary structure allows for multiple error messages per field,

    which is useful for complex validation scenarios where a single field might

    fail multiple validation rules.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Dictionary&lt;string, string[]&gt; validationErrors = new()

    {
        ["Email"] = ["Email is required", "Email format is invalid"],
        ["Password"] = ["Password must be at least 8 characters"],
        ["Age"] = ["Age must be between 18 and 120"]
    };


    Result validationResult = Result.Failure(validationErrors);


    // Access specific field errors

    if (validationResult.Failures.TryGetValue("Email", out string[] emailErrors))

    {
        foreach (string error in emailErrors)
        {
            Console.WriteLine($"Email error: {error}");
        }
    }</code></pre>
  syntax:
    content: public static Result Failure(IDictionary<string, string[]> errors)
    parameters:
    - id: errors
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: A dictionary containing field names as keys and arrays of error messages as values. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing all the validation errors.
    content.vb: Public Shared Function Failure(errors As IDictionary(Of String, String())) As Result
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">errors</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Failure(IDictionary(Of String, String()))
- uid: FlowRight.Core.Results.Result.Failure``1(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  id: Failure``1(System.String,FlowRight.Core.Results.ResultType,FlowRight.Core.Results.ResultFailureType)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure<T>(string, ResultType, ResultFailureType)
  nameWithType: Result.Failure<T>(string, ResultType, ResultFailureType)
  fullName: FlowRight.Core.Results.Result.Failure<T>(string, FlowRight.Core.Results.ResultType, FlowRight.Core.Results.ResultFailureType)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 222
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with the specified error message and result type classification.
  remarks: >-
    <p>

    This is the primary method for creating general failure results that would have returned

    a typed value. It allows full control over both the result type and failure type classifications.

    </p>

    <p>

    Use this method when you need to create custom failure scenarios for operations

    that normally return a specific type but have encountered an error condition.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Operation that would return a User

    Result&lt;User&gt; GetUserResult(int userId)

    {
        if (userId &lt;= 0)
            return Result.Failure&lt;User&gt;("Invalid user ID");

        User user = userRepository.GetById(userId);
        return user != null 
            ? Result.Success(user)
            : Result.Failure&lt;User&gt;("User not found");
    }</code></pre>
  syntax:
    content: public static Result<T> Failure<T>(string error, ResultType resultType = ResultType.Error, ResultFailureType resultFailureType = ResultFailureType.Error)
    parameters:
    - id: error
      type: System.String
      description: The error message describing what went wrong. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: resultType
      type: FlowRight.Core.Results.ResultType
      description: The general result type classification. Defaults to <xref href="FlowRight.Core.Results.ResultType.Error" data-throw-if-not-resolved="false"></xref>.
    - id: resultFailureType
      type: FlowRight.Core.Results.ResultFailureType
      description: The specific failure type classification. Defaults to <xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance containing the error information.
    content.vb: Public Shared Function Failure(Of T)([error] As String, resultType As ResultType = ResultType.Error, resultFailureType As ResultFailureType = ResultFailureType.Error) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">error</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(Of T)(String, ResultType, ResultFailureType)
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(String, FlowRight.Core.Results.ResultType, FlowRight.Core.Results.ResultFailureType)
  name.vb: Failure(Of T)(String, ResultType, ResultFailureType)
- uid: FlowRight.Core.Results.Result.Failure``1(System.String,System.String)
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.String,System.String)
  id: Failure``1(System.String,System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure<T>(string, string)
  nameWithType: Result.Failure<T>(string, string)
  fullName: FlowRight.Core.Results.Result.Failure<T>(string, string)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 251
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with a single field validation error for a generic result type.
  remarks: >-
    <p>

    This method creates a validation failure result for a single field in the context

    of an operation that would normally return a typed value. The resulting failure

    will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref>.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;Order&gt; CreateOrder(CreateOrderRequest request)

    {
        if (string.IsNullOrEmpty(request.CustomerEmail))
            return Result.Failure&lt;Order&gt;("CustomerEmail", "Email is required");

        // Continue with order creation...
    }</code></pre>
  syntax:
    content: public static Result<T> Failure<T>(string key, string error)
    parameters:
    - id: key
      type: System.String
      description: The name of the field or property that failed validation. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: error
      type: System.String
      description: The validation error message for the specified field. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing the field error.
    content.vb: Public Shared Function Failure(Of T)(key As String, [error] As String) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">key</code> or <code class="paramref">error</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(Of T)(String, String)
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(String, String)
  name.vb: Failure(Of T)(String, String)
- uid: FlowRight.Core.Results.Result.Failure``1(System.Security.SecurityException)
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.Security.SecurityException)
  id: Failure``1(System.Security.SecurityException)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure<T>(SecurityException)
  nameWithType: Result.Failure<T>(SecurityException)
  fullName: FlowRight.Core.Results.Result.Failure<T>(System.Security.SecurityException)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 284
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result from a security exception for a generic result type.
  remarks: >-
    <p>

    This method creates a security failure result from a <xref href="System.Security.SecurityException" data-throw-if-not-resolved="false"></xref>

    for operations that would normally return a typed value. Security failures require

    special handling and monitoring considerations.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;Document&gt; GetSecureDocument(int documentId)

    {
        try
        {
            Document doc = secureRepository.GetDocument(documentId);
            return Result.Success(doc);
        }
        catch (SecurityException ex)
        {
            return Result.Failure&lt;Document&gt;(ex);
        }
    }</code></pre>
  syntax:
    content: public static Result<T> Failure<T>(SecurityException securityException)
    parameters:
    - id: securityException
      type: System.Security.SecurityException
      description: The security exception that occurred. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> containing the security error.
    content.vb: Public Shared Function Failure(Of T)(securityException As SecurityException) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">securityException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(Of T)(SecurityException)
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(System.Security.SecurityException)
  name.vb: Failure(Of T)(SecurityException)
- uid: FlowRight.Core.Results.Result.Failure``1(System.OperationCanceledException)
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.OperationCanceledException)
  id: Failure``1(System.OperationCanceledException)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure<T>(OperationCanceledException)
  nameWithType: Result.Failure<T>(OperationCanceledException)
  fullName: FlowRight.Core.Results.Result.Failure<T>(System.OperationCanceledException)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 317
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result from an operation canceled exception for a generic result type.
  remarks: >-
    <p>

    This method creates a cancellation failure result from an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref>

    for operations that would normally return a typed value. Cancellation represents normal

    flow control rather than an error condition.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">async Task&lt;Result&lt;Data&gt;&gt; FetchDataAsync(CancellationToken cancellationToken)

    {
        try
        {
            Data data = await dataService.GetAsync(cancellationToken);
            return Result.Success(data);
        }
        catch (OperationCanceledException ex)
        {
            return Result.Failure&lt;Data&gt;(ex);
        }
    }</code></pre>
  syntax:
    content: public static Result<T> Failure<T>(OperationCanceledException operationCanceledException)
    parameters:
    - id: operationCanceledException
      type: System.OperationCanceledException
      description: The operation canceled exception that occurred. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> containing the cancellation information.
    content.vb: Public Shared Function Failure(Of T)(operationCanceledException As OperationCanceledException) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">operationCanceledException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(Of T)(OperationCanceledException)
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(System.OperationCanceledException)
  name.vb: Failure(Of T)(OperationCanceledException)
- uid: FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  id: Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failure<T>(IDictionary<string, string[]>)
  nameWithType: Result.Failure<T>(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.Failure<T>(System.Collections.Generic.IDictionary<string, string[]>)
  type: Method
  source:
    id: Failure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 348
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with multiple validation errors for a generic result type.
  remarks: >-
    <p>

    This method creates a validation failure result containing multiple field errors

    for operations that would normally return a typed value. It's used when comprehensive

    validation results in multiple field-level errors.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result&lt;User&gt; CreateUser(CreateUserRequest request)

    {
        Dictionary&lt;string, string[]&gt; validationErrors = ValidateUser(request);

        if (validationErrors.Any())
            return Result.Failure&lt;User&gt;(validationErrors);

        User user = new User(request);
        return Result.Success(user);
    }</code></pre>
  syntax:
    content: public static Result<T> Failure<T>(IDictionary<string, string[]> errors)
    parameters:
    - id: errors
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: A dictionary containing field names as keys and arrays of error messages as values. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing all the validation errors.
    content.vb: Public Shared Function Failure(Of T)(errors As IDictionary(Of String, String())) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Failure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">errors</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Failure(Of T)(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Failure(Of T)(IDictionary(Of String, String()))
- uid: FlowRight.Core.Results.Result.NotFound(System.String)
  commentId: M:FlowRight.Core.Results.Result.NotFound(System.String)
  id: NotFound(System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: NotFound(string?)
  nameWithType: Result.NotFound(string?)
  fullName: FlowRight.Core.Results.Result.NotFound(string?)
  type: Method
  source:
    id: NotFound
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 388
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result indicating that a resource was not found.
  remarks: >-
    <p>

    This method creates a "not found" failure result that corresponds to HTTP 404 status codes

    and similar scenarios where a requested resource does not exist. The resulting failure

    will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.NotFound" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Not found failures are distinct from general errors as they represent expected scenarios

    in many applications (e.g., searching for data that doesn't exist) and may be handled

    differently from actual system errors.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Generic not found error

    Result result = Result.NotFound();


    // Specific resource not found

    Result userResult = Result.NotFound("User with ID 123");


    // Usage in a service method

    public Result DeleteUser(int userId)

    {
        User user = userRepository.GetById(userId);
        if (user == null)
            return Result.NotFound($"User with ID {userId}");

        userRepository.Delete(user);
        return Result.Success();
    }</code></pre>
  syntax:
    content: public static Result NotFound(string? resource = null)
    parameters:
    - id: resource
      type: System.String
      description: Optional description of the resource that was not found. If not provided, defaults to "Not Found".
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.NotFound" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function NotFound(resource As String = Nothing) As Result
  overload: FlowRight.Core.Results.Result.NotFound*
  nameWithType.vb: Result.NotFound(String)
  fullName.vb: FlowRight.Core.Results.Result.NotFound(String)
  name.vb: NotFound(String)
- uid: FlowRight.Core.Results.Result.NotFound``1(System.String)
  commentId: M:FlowRight.Core.Results.Result.NotFound``1(System.String)
  id: NotFound``1(System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: NotFound<T>(string?)
  nameWithType: Result.NotFound<T>(string?)
  fullName: FlowRight.Core.Results.Result.NotFound<T>(string?)
  type: Method
  source:
    id: NotFound
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 423
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result indicating that a resource was not found for a generic result type.
  remarks: >-
    <p>

    This method creates a "not found" failure result for operations that would normally return

    a typed value. The resulting failure will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of 

    <xref href="FlowRight.Core.Results.ResultFailureType.NotFound" data-throw-if-not-resolved="false"></xref>, allowing consumers to distinguish between

    not found scenarios and actual errors.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Generic not found error

    Result&lt;User&gt; result = Result.NotFound&lt;User&gt;();


    // Specific resource not found

    Result&lt;Document&gt; docResult = Result.NotFound&lt;Document&gt;("Document with ID ABC123");


    // Usage in a repository method

    public Result&lt;User&gt; GetUser(int userId)

    {
        User user = database.Users.FirstOrDefault(u =&gt; u.Id == userId);
        return user != null 
            ? Result.Success(user)
            : Result.NotFound&lt;User&gt;($"User with ID {userId}");
    }</code></pre>
  syntax:
    content: public static Result<T> NotFound<T>(string? resource = null)
    parameters:
    - id: resource
      type: System.String
      description: Optional description of the resource that was not found. If not provided, defaults to "Not Found".
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.NotFound" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function NotFound(Of T)(resource As String = Nothing) As Result(Of T)
  overload: FlowRight.Core.Results.Result.NotFound*
  nameWithType.vb: Result.NotFound(Of T)(String)
  fullName.vb: FlowRight.Core.Results.Result.NotFound(Of T)(String)
  name.vb: NotFound(Of T)(String)
- uid: FlowRight.Core.Results.Result.ServerError(System.String)
  commentId: M:FlowRight.Core.Results.Result.ServerError(System.String)
  id: ServerError(System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: ServerError(string?)
  nameWithType: Result.ServerError(string?)
  fullName: FlowRight.Core.Results.Result.ServerError(string?)
  type: Method
  source:
    id: ServerError
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 466
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result indicating that a server error occurred.
  remarks: >-
    <p>

    This method creates a server error failure result that corresponds to HTTP 5xx status codes

    and similar scenarios where a server-side error has occurred. The resulting failure

    will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of <xref href="FlowRight.Core.Results.ResultFailureType.ServerError" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Server errors represent temporary failures on the server side that may be resolved

    with retry mechanisms, circuit breakers, or service recovery. They are distinct from

    client errors and may be handled differently (e.g., with retry logic).

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Generic server error

    Result result = Result.ServerError();


    // Specific server error

    Result dbResult = Result.ServerError("Database connection timeout");


    // Usage in a service method

    public Result ProcessRequest()

    {
        try
        {
            // Process request
            return Result.Success();
        }
        catch (TimeoutException)
        {
            return Result.ServerError("Request timed out");
        }
    }</code></pre>
  syntax:
    content: public static Result ServerError(string? message = null)
    parameters:
    - id: message
      type: System.String
      description: Optional custom error message. If not provided, defaults to "Server Error".
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.ServerError" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function ServerError(message As String = Nothing) As Result
  overload: FlowRight.Core.Results.Result.ServerError*
  nameWithType.vb: Result.ServerError(String)
  fullName.vb: FlowRight.Core.Results.Result.ServerError(String)
  name.vb: ServerError(String)
- uid: FlowRight.Core.Results.Result.ServerError``1(System.String)
  commentId: M:FlowRight.Core.Results.Result.ServerError``1(System.String)
  id: ServerError``1(System.String)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: ServerError<T>(string?)
  nameWithType: Result.ServerError<T>(string?)
  fullName: FlowRight.Core.Results.Result.ServerError<T>(string?)
  type: Method
  source:
    id: ServerError
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 506
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result indicating that a server error occurred for a generic result type.
  remarks: >-
    <p>

    This method creates a server error failure result for operations that would normally return

    a typed value. The resulting failure will have a <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref> of 

    <xref href="FlowRight.Core.Results.ResultFailureType.ServerError" data-throw-if-not-resolved="false"></xref>, allowing consumers to distinguish between

    server errors and client errors for appropriate retry strategies.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Generic server error

    Result&lt;User&gt; result = Result.ServerError&lt;User&gt;();


    // Specific server error

    Result&lt;Data&gt; dataResult = Result.ServerError&lt;Data&gt;("Service unavailable");


    // Usage in a service method

    public Result&lt;User&gt; GetUser(int userId)

    {
        try
        {
            User user = userService.GetById(userId);
            return Result.Success(user);
        }
        catch (ServiceUnavailableException ex)
        {
            return Result.ServerError&lt;User&gt;(ex.Message);
        }
    }</code></pre>
  syntax:
    content: public static Result<T> ServerError<T>(string? message = null)
    parameters:
    - id: message
      type: System.String
      description: Optional custom error message. If not provided, defaults to "Server Error".
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.ServerError" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function ServerError(Of T)(message As String = Nothing) As Result(Of T)
  overload: FlowRight.Core.Results.Result.ServerError*
  nameWithType.vb: Result.ServerError(Of T)(String)
  fullName.vb: FlowRight.Core.Results.Result.ServerError(Of T)(String)
  name.vb: ServerError(Of T)(String)
- uid: FlowRight.Core.Results.Result.ValidationFailure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.ValidationFailure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  id: ValidationFailure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: ValidationFailure(IDictionary<string, string[]>)
  nameWithType: Result.ValidationFailure(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.ValidationFailure(System.Collections.Generic.IDictionary<string, string[]>)
  type: Method
  source:
    id: ValidationFailure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 532
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with multiple validation errors (convenience method).
  remarks: >-
    <p>

    This is a convenience method that is equivalent to calling <xref href="FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary%7bSystem.String%2cSystem.String%5b%5d%7d)" data-throw-if-not-resolved="false"></xref>.

    It provides a more explicit name when creating validation-specific failures.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Dictionary&lt;string, string[]&gt; validationErrors = new()

    {
        ["Email"] = ["Email is required", "Email format is invalid"],
        ["Password"] = ["Password must be at least 8 characters"]
    };


    Result validationResult = Result.ValidationFailure(validationErrors);</code></pre>
  syntax:
    content: public static Result ValidationFailure(IDictionary<string, string[]> errors)
    parameters:
    - id: errors
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: A dictionary containing field names as keys and arrays of error messages as values. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    return:
      type: FlowRight.Core.Results.Result
      description: A failed <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing all the validation errors.
    content.vb: Public Shared Function ValidationFailure(errors As IDictionary(Of String, String())) As Result
  overload: FlowRight.Core.Results.Result.ValidationFailure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">errors</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.ValidationFailure(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.ValidationFailure(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: ValidationFailure(IDictionary(Of String, String()))
- uid: FlowRight.Core.Results.Result.ValidationFailure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.ValidationFailure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  id: ValidationFailure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: ValidationFailure<T>(IDictionary<string, string[]>)
  nameWithType: Result.ValidationFailure<T>(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.ValidationFailure<T>(System.Collections.Generic.IDictionary<string, string[]>)
  type: Method
  source:
    id: ValidationFailure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Failure.cs
    startLine: 559
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a failed result with multiple validation errors for a generic result type (convenience method).
  remarks: >-
    <p>

    This is a convenience method that is equivalent to calling <xref href="FlowRight.Core.Results.Result.Failure%60%601(System.Collections.Generic.IDictionary%7bSystem.String%2cSystem.String%5b%5d%7d)" data-throw-if-not-resolved="false"></xref>.

    It provides a more explicit name when creating validation-specific failures.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Dictionary&lt;string, string[]&gt; validationErrors = new()

    {
        ["Name"] = ["Name is required"],
        ["Age"] = ["Age must be between 18 and 120"]
    };


    Result&lt;User&gt; validationResult = Result.ValidationFailure&lt;User&gt;(validationErrors);</code></pre>
  syntax:
    content: public static Result<T> ValidationFailure<T>(IDictionary<string, string[]> errors)
    parameters:
    - id: errors
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: A dictionary containing field names as keys and arrays of error messages as values. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    typeParameters:
    - id: T
      description: The type parameter for the generic result.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A failed <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance with <xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> containing all the validation errors.
    content.vb: Public Shared Function ValidationFailure(Of T)(errors As IDictionary(Of String, String())) As Result(Of T)
  overload: FlowRight.Core.Results.Result.ValidationFailure*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">errors</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.ValidationFailure(Of T)(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.ValidationFailure(Of T)(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: ValidationFailure(Of T)(IDictionary(Of String, String()))
- uid: FlowRight.Core.Results.Result.Combine(FlowRight.Core.Results.Result[])
  commentId: M:FlowRight.Core.Results.Result.Combine(FlowRight.Core.Results.Result[])
  id: Combine(FlowRight.Core.Results.Result[])
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Combine(params Result[])
  nameWithType: Result.Combine(params Result[])
  fullName: FlowRight.Core.Results.Result.Combine(params FlowRight.Core.Results.Result[])
  type: Method
  source:
    id: Combine
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 134
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: >-
    Combines multiple Result instances into a single Result, aggregating all failure information

    and returning success only if all input results are successful.
  remarks: >-
    <p>

    This method provides a way to aggregate multiple operation results into a single result.

    It's particularly useful for batch operations where you want to collect all errors

    rather than failing on the first error encountered.

    </p>

    <p>

    The combining logic preserves error categorization:

    <ul><li>Validation errors are merged by field name</li><li>Other error types are grouped by failure type</li><li>Multiple errors of the same type are collected together</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result[] operations = [
        ValidateUser(user),
        ValidatePermissions(user),
        ValidateData(data)
    ];


    Result combinedResult = Result.Combine(operations);


    if (combinedResult.IsFailure)

    {
        // Handle all collected errors at once
        LogErrors(combinedResult.Failures);
    }</code></pre>
  syntax:
    content: public static Result Combine(params Result[] results)
    parameters:
    - id: results
      type: FlowRight.Core.Results.Result[]
      description: The array of Result instances to combine.
    return:
      type: FlowRight.Core.Results.Result
      description: >-
        A <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> that is successful if all input results are successful, 

        or a failure result containing aggregated error information from all failed results.
    content.vb: Public Shared Function Combine(ParamArray results As Result()) As Result
  overload: FlowRight.Core.Results.Result.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">results</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Combine(ParamArray Result())
  fullName.vb: FlowRight.Core.Results.Result.Combine(ParamArray FlowRight.Core.Results.Result())
  name.vb: Combine(ParamArray Result())
- uid: FlowRight.Core.Results.Result.Combine``1(FlowRight.Core.Results.Result{``0}[])
  commentId: M:FlowRight.Core.Results.Result.Combine``1(FlowRight.Core.Results.Result{``0}[])
  id: Combine``1(FlowRight.Core.Results.Result{``0}[])
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Combine<T>(params Result<T>[])
  nameWithType: Result.Combine<T>(params Result<T>[])
  fullName: FlowRight.Core.Results.Result.Combine<T>(params FlowRight.Core.Results.Result<T>[])
  type: Method
  source:
    id: Combine
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 225
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: >-
    Combines multiple Result{T} instances into a single Result{T}, aggregating all failure information

    and returning success only if all input results are successful.
  remarks: >-
    <p>

    This method provides a way to aggregate multiple operation results into a single result.

    It's particularly useful for batch operations where you want to collect all errors

    rather than failing on the first error encountered.

    </p>

    <p>

    The combining logic preserves error categorization:

    <ul><li>Validation errors are merged by field name</li><li>Other error types are grouped by failure type</li><li>Multiple errors of the same type are collected together</li></ul>

    </p>

    <p>

    If all results are successful, the returned result will contain the value from the first

    successful result. If you need to combine the actual values, use a different approach

    such as collecting the values after confirming all results are successful.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result{User}[] operations = [
        ValidateUser(user),
        ValidatePermissions(user),
        ValidateData(data)
    ];


    Result{User} combinedResult = Result.Combine(operations);


    if (combinedResult.IsFailure)

    {
        // Handle all collected errors at once
        LogErrors(combinedResult.Failures);
    }</code></pre>
  syntax:
    content: public static Result<T> Combine<T>(params Result<T>[] results)
    parameters:
    - id: results
      type: FlowRight.Core.Results.Result{{T}}[]
      description: The array of Result{T} instances to combine.
    typeParameters:
    - id: T
      description: The type of the success values in the results.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: >-
        A <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> that is successful with the value from the first successful result if all input results are successful, 

        or a failure result containing aggregated error information from all failed results.
    content.vb: Public Shared Function Combine(Of T)(ParamArray results As Result(Of T)()) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">results</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Combine(Of T)(ParamArray Result(Of T)())
  fullName.vb: FlowRight.Core.Results.Result.Combine(Of T)(ParamArray FlowRight.Core.Results.Result(Of T)())
  name.vb: Combine(Of T)(ParamArray Result(Of T)())
- uid: FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
  id: Match``1(System.Func{``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Match<TResult>(Func<TResult>, Func<string, TResult>)
  nameWithType: Result.Match<TResult>(Func<TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result.Match<TResult>(System.Func<TResult>, System.Func<string, TResult>)
  type: Method
  source:
    id: Match
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 317
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Transforms this result into a value of type <code class="typeparamref">TResult</code> using pattern matching.
  remarks: >-
    <p>

    This is the primary pattern matching method for non-generic <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref>. It provides a functional

    approach to handling both success and failure cases by requiring explicit handling of both scenarios.

    </p>

    <p>

    This method treats all failure types (Error, Security, Validation, OperationCanceled) uniformly,

    calling <code class="paramref">onFailure</code> with the error message. For more granular failure handling,

    use the overload that provides separate handlers for each failure type.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result operationResult = PerformOperation();


    string message = operationResult.Match(
        onSuccess: () =&gt; "Operation completed successfully!",
        onFailure: error =&gt; $"Operation failed: {error}"
    );


    Console.WriteLine(message);</code></pre>
  syntax:
    content: public TResult Match<TResult>(Func<TResult> onSuccess, Func<string, TResult> onFailure)
    parameters:
    - id: onSuccess
      type: System.Func{{TResult}}
      description: Function to execute if the result is successful. Returns the success value.
    - id: onFailure
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a failure. Receives the error message.
    typeParameters:
    - id: TResult
      description: The type of the result to return.
    return:
      type: '{TResult}'
      description: The value returned by either <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code>.
    content.vb: Public Function Match(Of TResult)(onSuccess As Func(Of TResult), onFailure As Func(Of String, TResult)) As TResult
  overload: FlowRight.Core.Results.Result.Match*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Match(Of TResult)(Func(Of TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result.Match(Of TResult)(System.Func(Of TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of TResult), Func(Of String, TResult))
- uid: FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  id: Match``1(System.Func{``0},System.Func{System.String,``0},System.Func{System.String,``0},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0},System.Func{System.String,``0})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Match<TResult>(Func<TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  nameWithType: Result.Match<TResult>(Func<TResult>, Func<string, TResult>, Func<string, TResult>, Func<IDictionary<string, string[]>, TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result.Match<TResult>(System.Func<TResult>, System.Func<string, TResult>, System.Func<string, TResult>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>, System.Func<string, TResult>)
  type: Method
  source:
    id: Match
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 367
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Transforms this result into a value of type <code class="typeparamref">TResult</code> using pattern matching with specific handlers for each failure type.
  remarks: >-
    <p>

    This overload of Match provides granular control over different failure types, allowing you to

    implement specific logic for each category of failure. This is particularly useful when different

    failure types require different handling strategies.

    </p>

    <p>

    The method routes failures to the appropriate handler based on <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref>:

    <ul><li><xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onError</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onSecurityException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onValidationException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onOperationCanceledException</code></li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result operationResult = ProcessRequest();


    string response = operationResult.Match(
        onSuccess: () =&gt; "Success!",
        onError: error =&gt; $"Error: {error}",
        onSecurityException: error =&gt; "Access denied",
        onValidationException: errors =&gt; $"Validation failed: {errors.Count} errors",
        onOperationCanceledException: error =&gt; "Operation was cancelled"
    );</code></pre>
  syntax:
    content: public TResult Match<TResult>(Func<TResult> onSuccess, Func<string, TResult> onError, Func<string, TResult> onSecurityException, Func<IDictionary<string, string[]>, TResult> onValidationException, Func<string, TResult> onOperationCanceledException)
    parameters:
    - id: onSuccess
      type: System.Func{{TResult}}
      description: Function to execute if the result is successful. Returns the success value.
    - id: onError
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a general error. Receives the error message.
    - id: onSecurityException
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a security failure. Receives the error message.
    - id: onValidationException
      type: System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}}
      description: Function to execute if the result is a validation failure. Receives the validation errors dictionary.
    - id: onOperationCanceledException
      type: System.Func{System.String,{TResult}}
      description: Function to execute if the result is a cancellation failure. Receives the error message.
    typeParameters:
    - id: TResult
      description: The type of the result to return.
    return:
      type: '{TResult}'
      description: The value returned by the appropriate handler function.
    content.vb: Public Function Match(Of TResult)(onSuccess As Func(Of TResult), onError As Func(Of String, TResult), onSecurityException As Func(Of String, TResult), onValidationException As Func(Of IDictionary(Of String, String()), TResult), onOperationCanceledException As Func(Of String, TResult)) As TResult
  overload: FlowRight.Core.Results.Result.Match*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when any of the handler functions is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Match(Of TResult)(Func(Of TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result.Match(Of TResult)(System.Func(Of TResult), System.Func(Of String, TResult), System.Func(Of String, TResult), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of TResult), Func(Of String, TResult), Func(Of String, TResult), Func(Of IDictionary(Of String, String()), TResult), Func(Of String, TResult))
- uid: FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Boolean)
  commentId: M:FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Boolean)
  id: Switch(System.Action,System.Action{System.String},System.Boolean)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Switch(Action, Action<string>, bool)
  nameWithType: Result.Switch(Action, Action<string>, bool)
  fullName: FlowRight.Core.Results.Result.Switch(System.Action, System.Action<string>, bool)
  type: Method
  source:
    id: Switch
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 425
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Executes side-effect actions based on the result state, with simple success/failure handling.
  remarks: >-
    <p>

    This is the primary imperative pattern matching method for non-generic <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref>. Unlike the functional

    <xref href="FlowRight.Core.Results.Result.Match%60%601(System.Func%7b%60%600%7d%2cSystem.Func%7bSystem.String%2c%60%600%7d)" data-throw-if-not-resolved="false"></xref> method, this executes actions with side effects

    rather than returning transformed values.

    </p>

    <p>

    This method treats most failure types (Error, Security, Validation) uniformly, calling <code class="paramref">onFailure</code>

    with the error message. Operation cancelled failures are treated specially based on the

    <code class="paramref">includeOperationCancelledFailures</code> parameter. For more granular failure handling,

    use the overload that provides separate handlers for each failure type.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result operationResult = PerformOperation();


    operationResult.Switch(
        onSuccess: () =&gt; {
            Console.WriteLine("Operation completed successfully!");
            LogSuccess("Operation", DateTime.Now);
        },
        onFailure: error =&gt; {
            Console.WriteLine($"Operation failed: {error}");
            LogError("Operation", error);
        }
    );</code></pre>
  syntax:
    content: public void Switch(Action onSuccess, Action<string> onFailure, bool includeOperationCancelledFailures = false)
    parameters:
    - id: onSuccess
      type: System.Action
      description: Action to execute if the result is successful.
    - id: onFailure
      type: System.Action{System.String}
      description: Action to execute if the result is a failure. Receives the error message.
    - id: includeOperationCancelledFailures
      type: System.Boolean
      description: If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, operation cancelled failures will call <code class="paramref">onFailure</code>. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default), they will be ignored.
    content.vb: Public Sub Switch(onSuccess As Action, onFailure As Action(Of String), includeOperationCancelledFailures As Boolean = False)
  overload: FlowRight.Core.Results.Result.Switch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code> or <code class="paramref">onFailure</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Switch(Action, Action(Of String), Boolean)
  fullName.vb: FlowRight.Core.Results.Result.Switch(System.Action, System.Action(Of String), Boolean)
  name.vb: Switch(Action, Action(Of String), Boolean)
- uid: FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  commentId: M:FlowRight.Core.Results.Result.Switch(System.Action,System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  id: Switch(System.Action,System.Action{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{System.String})
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Switch(Action, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>?)
  nameWithType: Result.Switch(Action, Action<string>, Action<string>, Action<IDictionary<string, string[]>>, Action<string>?)
  fullName: FlowRight.Core.Results.Result.Switch(System.Action, System.Action<string>, System.Action<string>, System.Action<System.Collections.Generic.IDictionary<string, string[]>>, System.Action<string>?)
  type: Method
  source:
    id: Switch
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 497
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Executes side-effect actions based on the result state with separate handlers for different failure types.
  remarks: >-
    <p>

    This overload of Switch provides granular control over different failure types using imperative actions,

    allowing you to implement specific side effects for each category of failure. This is particularly useful

    when different failure types require different handling strategies (logging, notifications, etc.).

    </p>

    <p>

    The method routes failures to the appropriate handler based on <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref>:

    <ul><li><xref href="FlowRight.Core.Results.ResultFailureType.Error" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onError</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Security" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onSecurityException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.Validation" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onValidationException</code></li><li><xref href="FlowRight.Core.Results.ResultFailureType.OperationCanceled" data-throw-if-not-resolved="false"></xref> → <code class="paramref">onOperationCanceledException</code> (if not null)</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result operationResult = ProcessRequest();


    operationResult.Switch(
        onSuccess: () =&gt; {
            logger.LogInformation("Request processed successfully");
            SendSuccessNotification();
        },
        onError: error =&gt; {
            logger.LogError("System error: {Error}", error);
            SendErrorNotification(error);
        },
        onSecurityException: error =&gt; {
            logger.LogWarning("Security violation: {Error}", error);
            AlertSecurityTeam(error);
        },
        onValidationException: errors =&gt; {
            logger.LogInformation("Validation failed: {ErrorCount} errors", errors.Count);
            ShowValidationErrors(errors);
        },
        onOperationCanceledException: error =&gt; {
            logger.LogInformation("Request was cancelled: {Error}", error);
            CleanupResources();
        }
    );</code></pre>
  syntax:
    content: public void Switch(Action onSuccess, Action<string> onError, Action<string> onSecurityException, Action<IDictionary<string, string[]>> onValidationException, Action<string>? onOperationCanceledException = null)
    parameters:
    - id: onSuccess
      type: System.Action
      description: Action to execute if the result is successful.
    - id: onError
      type: System.Action{System.String}
      description: Action to execute if the result is a general error. Receives the error message.
    - id: onSecurityException
      type: System.Action{System.String}
      description: Action to execute if the result is a security failure. Receives the error message.
    - id: onValidationException
      type: System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
      description: Action to execute if the result is a validation failure. Receives the validation errors dictionary.
    - id: onOperationCanceledException
      type: System.Action{System.String}
      description: Optional action to execute if the result is a cancellation failure. Receives the error message. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>, cancellation failures are ignored.
    content.vb: Public Sub Switch(onSuccess As Action, onError As Action(Of String), onSecurityException As Action(Of String), onValidationException As Action(Of IDictionary(Of String, String())), onOperationCanceledException As Action(Of String) = Nothing)
  overload: FlowRight.Core.Results.Result.Switch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">onSuccess</code>, <code class="paramref">onError</code>, <code class="paramref">onSecurityException</code>, or <code class="paramref">onValidationException</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Switch(Action, Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
  fullName.vb: FlowRight.Core.Results.Result.Switch(System.Action, System.Action(Of String), System.Action(Of String), System.Action(Of System.Collections.Generic.IDictionary(Of String, String())), System.Action(Of String))
  name.vb: Switch(Action, Action(Of String), Action(Of String), Action(Of IDictionary(Of String, String())), Action(Of String))
- uid: FlowRight.Core.Results.Result.op_Explicit(FlowRight.Core.Results.Result)~System.Boolean
  commentId: M:FlowRight.Core.Results.Result.op_Explicit(FlowRight.Core.Results.Result)~System.Boolean
  id: op_Explicit(FlowRight.Core.Results.Result)~System.Boolean
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: explicit operator bool(Result)
  nameWithType: Result.explicit operator bool(Result)
  fullName: FlowRight.Core.Results.Result.explicit operator bool(FlowRight.Core.Results.Result)
  type: Operator
  source:
    id: op_Explicit
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 562
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Explicitly converts a <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> to a boolean indicating success or failure.
  remarks: >-
    <p>

    This explicit conversion provides a convenient way to use results in boolean contexts

    while making the conversion explicit to avoid accidental usage.

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">Result result = PerformOperation();


    if ((bool)result) // Explicit conversion

    {
        Console.WriteLine("Operation succeeded!");
    }</code></pre>
  syntax:
    content: public static explicit operator bool(Result result)
    parameters:
    - id: result
      type: FlowRight.Core.Results.Result
      description: The result to convert.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents success; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Narrowing Operator CType(result As Result) As Boolean
  overload: FlowRight.Core.Results.Result.op_Explicit*
  nameWithType.vb: Result.CType(Result)
  fullName.vb: FlowRight.Core.Results.Result.CType(FlowRight.Core.Results.Result)
  name.vb: CType(Result)
- uid: FlowRight.Core.Results.Result.Error
  commentId: P:FlowRight.Core.Results.Result.Error
  id: Error
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: Result.Error
  fullName: FlowRight.Core.Results.Result.Error
  type: Property
  source:
    id: Error
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 608
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the error message associated with this result.
  remarks: >-
    This property implements <xref href="FlowRight.Core.Results.IResultError%601.Error" data-throw-if-not-resolved="false"></xref> and provides the primary

    error message for the result. The content varies by failure type:

    <ul><li><strong>Success:</strong> Empty string</li><li><strong>General errors:</strong> The specific error message</li><li><strong>Validation errors:</strong> Formatted summary of all field errors</li><li><strong>Security errors:</strong> Security exception message</li><li><strong>Cancellation:</strong> Operation canceled message</li></ul>
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public string Error { get; }
    parameters: []
    return:
      type: System.String
      description: >-
        A string containing the error message for failed results, or an empty string for successful results.

        For validation failures, this contains a formatted summary of all validation errors.
    content.vb: >-
      <JsonInclude>

      Public Property [Error] As String
  overload: FlowRight.Core.Results.Result.Error*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: FlowRight.Core.Results.Result.Failures
  commentId: P:FlowRight.Core.Results.Result.Failures
  id: Failures
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Failures
  nameWithType: Result.Failures
  fullName: FlowRight.Core.Results.Result.Failures
  type: Property
  source:
    id: Failures
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 625
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a dictionary of field-specific validation failures.
  remarks: >-
    This property provides detailed field-level error information for validation failures.

    It allows consumers to display specific error messages for individual form fields

    or properties. For non-validation failures, this dictionary is empty.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public IDictionary<string, string[]> Failures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String[]}
      description: >-
        An <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> where keys represent field names and values

        represent arrays of error messages for each field. Empty for non-validation failures.
    content.vb: >-
      <JsonInclude>

      Public Property Failures As IDictionary(Of String, String())
  overload: FlowRight.Core.Results.Result.Failures*
  implements:
  - FlowRight.Core.Results.IResult.Failures
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: FlowRight.Core.Results.Result.FailureType
  commentId: P:FlowRight.Core.Results.Result.FailureType
  id: FailureType
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: FailureType
  nameWithType: Result.FailureType
  fullName: FlowRight.Core.Results.Result.FailureType
  type: Property
  source:
    id: FailureType
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 640
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the specific type of failure that occurred.
  remarks: >-
    This property enables consumers to implement different handling strategies based on

    the type of failure. For example, validation failures might be displayed to users

    while security failures might be logged and result in access denial.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public ResultFailureType FailureType { get; }
    parameters: []
    return:
      type: FlowRight.Core.Results.ResultFailureType
      description: >-
        A <xref href="FlowRight.Core.Results.ResultFailureType" data-throw-if-not-resolved="false"></xref> value indicating the specific category of failure,

        or <xref href="FlowRight.Core.Results.ResultFailureType.None" data-throw-if-not-resolved="false"></xref> for successful results.
    content.vb: >-
      <JsonInclude>

      Public Property FailureType As ResultFailureType
  overload: FlowRight.Core.Results.Result.FailureType*
  implements:
  - FlowRight.Core.Results.IResult.FailureType
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: FlowRight.Core.Results.Result.IsFailure
  commentId: P:FlowRight.Core.Results.Result.IsFailure
  id: IsFailure
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: IsFailure
  nameWithType: Result.IsFailure
  fullName: FlowRight.Core.Results.Result.IsFailure
  type: Property
  source:
    id: IsFailure
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 653
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a value indicating whether this result represents a failure state.
  remarks: >-
    This property is determined by checking if an error message is present.

    It is always the logical inverse of <xref href="FlowRight.Core.Results.Result.IsSuccess" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsFailure { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents a failure; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsFailure As Boolean
  overload: FlowRight.Core.Results.Result.IsFailure*
  implements:
  - FlowRight.Core.Results.IResult.IsFailure
- uid: FlowRight.Core.Results.Result.IsSuccess
  commentId: P:FlowRight.Core.Results.Result.IsSuccess
  id: IsSuccess
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: Result.IsSuccess
  fullName: FlowRight.Core.Results.Result.IsSuccess
  type: Property
  source:
    id: IsSuccess
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 666
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets a value indicating whether this result represents a successful state.
  remarks: >-
    This property is determined by checking if no error message is present.

    It is always the logical inverse of <xref href="FlowRight.Core.Results.Result.IsFailure" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the result represents success; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: FlowRight.Core.Results.Result.IsSuccess*
  implements:
  - FlowRight.Core.Results.IResult.IsSuccess
- uid: FlowRight.Core.Results.Result.ResultType
  commentId: P:FlowRight.Core.Results.Result.ResultType
  id: ResultType
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: ResultType
  nameWithType: Result.ResultType
  fullName: FlowRight.Core.Results.Result.ResultType
  type: Property
  source:
    id: ResultType
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Result.cs
    startLine: 680
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Gets the general category of this result.
  remarks: >-
    This property provides high-level categorization that complements the more specific

    <xref href="FlowRight.Core.Results.Result.FailureType" data-throw-if-not-resolved="false"></xref>. It allows for broad categorization of results into

    success, informational, warning, or error states.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public ResultType ResultType { get; }
    parameters: []
    return:
      type: FlowRight.Core.Results.ResultType
      description: A <xref href="FlowRight.Core.Results.Result.ResultType" data-throw-if-not-resolved="false"></xref> value indicating the overall result category.
    content.vb: >-
      <JsonInclude>

      Public Property ResultType As ResultType
  overload: FlowRight.Core.Results.Result.ResultType*
  implements:
  - FlowRight.Core.Results.IResult.ResultType
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: FlowRight.Core.Results.Result.Success(FlowRight.Core.Results.ResultType)
  commentId: M:FlowRight.Core.Results.Result.Success(FlowRight.Core.Results.ResultType)
  id: Success(FlowRight.Core.Results.ResultType)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Success(ResultType)
  nameWithType: Result.Success(ResultType)
  fullName: FlowRight.Core.Results.Result.Success(FlowRight.Core.Results.ResultType)
  type: Method
  source:
    id: Success
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Success.cs
    startLine: 35
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a successful result without a value.
  remarks: >-
    <p>

    This method creates a non-generic result that represents a successful operation

    that doesn't return a specific value (similar to a void method that completed successfully).

    </p>

    <p>

    Common usage scenarios include:

    <ul><li>Operations that modify state but don't return data</li><li>Validation operations that either pass or fail</li><li>Delete or update operations</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Basic success

    Result result = Result.Success();


    // Success with additional classification

    Result infoResult = Result.Success(ResultType.Information);

    Result warningResult = Result.Success(ResultType.Warning);</code></pre>
  syntax:
    content: public static Result Success(ResultType resultType = ResultType.Success)
    parameters:
    - id: resultType
      type: FlowRight.Core.Results.ResultType
      description: The type classification for this successful result. Defaults to <xref href="FlowRight.Core.Results.ResultType.Success" data-throw-if-not-resolved="false"></xref>.
    return:
      type: FlowRight.Core.Results.Result
      description: A successful <xref href="FlowRight.Core.Results.Result" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Success(resultType As ResultType = ResultType.Success) As Result
  overload: FlowRight.Core.Results.Result.Success*
- uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  commentId: M:FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  id: Success``1(``0,FlowRight.Core.Results.ResultType)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: Success<T>(T, ResultType)
  nameWithType: Result.Success<T>(T, ResultType)
  fullName: FlowRight.Core.Results.Result.Success<T>(T, FlowRight.Core.Results.ResultType)
  type: Method
  source:
    id: Success
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Success.cs
    startLine: 76
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a successful result containing the specified value.
  remarks: >-
    <p>

    This is the primary method for creating successful results that return typed values.

    The result will be immutable and the value will be safely encapsulated.

    </p>

    <p>

    The result type parameter allows for additional classification of successful operations:

    <ul><li><xref href="FlowRight.Core.Results.ResultType.Success" data-throw-if-not-resolved="false"></xref> - Standard successful operation</li><li><xref href="FlowRight.Core.Results.ResultType.Information" data-throw-if-not-resolved="false"></xref> - Success with informational context</li><li><xref href="FlowRight.Core.Results.ResultType.Warning" data-throw-if-not-resolved="false"></xref> - Success but with warnings</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Create successful result with value

    User user = GetCurrentUser();

    Result&lt;User&gt; userResult = Result.Success(user);


    // Success with additional context

    Result&lt;string&gt; messageResult = Result.Success("Operation completed", ResultType.Information);


    // Pattern matching usage

    string displayMessage = userResult.Match(
        onSuccess: user =&gt; $"Welcome, {user.Name}!",
        onFailure: error =&gt; $"Error: {error}"
    );</code></pre>
  syntax:
    content: public static Result<T> Success<T>(T value, ResultType resultType = ResultType.Success)
    parameters:
    - id: value
      type: '{T}'
      description: The value to wrap in the result. Cannot be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: resultType
      type: FlowRight.Core.Results.ResultType
      description: The type classification for this successful result. Defaults to <xref href="FlowRight.Core.Results.ResultType.Success" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: The type of the success value.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A successful <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance containing the specified value.
    content.vb: Public Shared Function Success(Of T)(value As T, resultType As ResultType = ResultType.Success) As Result(Of T)
  overload: FlowRight.Core.Results.Result.Success*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">value</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Result.Success(Of T)(T, ResultType)
  fullName.vb: FlowRight.Core.Results.Result.Success(Of T)(T, FlowRight.Core.Results.ResultType)
  name.vb: Success(Of T)(T, ResultType)
- uid: FlowRight.Core.Results.Result.SuccessOrNull``1(``0,FlowRight.Core.Results.ResultType)
  commentId: M:FlowRight.Core.Results.Result.SuccessOrNull``1(``0,FlowRight.Core.Results.ResultType)
  id: SuccessOrNull``1(``0,FlowRight.Core.Results.ResultType)
  parent: FlowRight.Core.Results.Result
  langs:
  - csharp
  - vb
  name: SuccessOrNull<T>(T?, ResultType)
  nameWithType: Result.SuccessOrNull<T>(T?, ResultType)
  fullName: FlowRight.Core.Results.Result.SuccessOrNull<T>(T?, FlowRight.Core.Results.ResultType)
  type: Method
  source:
    id: SuccessOrNull
    path: /home/ringo/source/FlowRight-documentation/src/Core/Results/Success.cs
    startLine: 119
  assemblies:
  - FlowRight.Core
  namespace: FlowRight.Core.Results
  summary: Creates a successful result containing the specified value, allowing null values without throwing exceptions.
  remarks: >-
    <p>

    This method creates successful results that can contain null values without throwing exceptions,

    unlike the standard <xref href="FlowRight.Core.Results.Result.Success%60%601(%60%600%2cFlowRight.Core.Results.ResultType)" data-throw-if-not-resolved="false"></xref> method. This is particularly useful

    when deserializing JSON or handling API responses that may legitimately return null values.

    </p>

    <p>

    The result type parameter allows for additional classification of successful operations:

    <ul><li><xref href="FlowRight.Core.Results.ResultType.Success" data-throw-if-not-resolved="false"></xref> - Standard successful operation</li><li><xref href="FlowRight.Core.Results.ResultType.Information" data-throw-if-not-resolved="false"></xref> - Success with informational context</li><li><xref href="FlowRight.Core.Results.ResultType.Warning" data-throw-if-not-resolved="false"></xref> - Success but with warnings</li></ul>

    </p>
  example:
  - >-
    <pre><code class="lang-csharp">// Create successful result with null value - no exception thrown

    Result&lt;string?&gt; nullResult = Result.SuccessOrNull&lt;string&gt;(null);


    // Create successful result with non-null value

    Result&lt;string?&gt; valueResult = Result.SuccessOrNull("Hello World");


    // Success with additional context

    Result&lt;User?&gt; userResult = Result.SuccessOrNull(user, ResultType.Information);


    // Pattern matching usage

    string displayMessage = userResult.Match(
        onSuccess: user =&gt; user != null ? $"Welcome, {user.Name}!" : "No user found",
        onFailure: error =&gt; $"Error: {error}"
    );</code></pre>
  syntax:
    content: public static Result<T?> SuccessOrNull<T>(T? value, ResultType resultType = ResultType.Success)
    parameters:
    - id: value
      type: '{T}'
      description: The value to wrap in the result. Can be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: resultType
      type: FlowRight.Core.Results.ResultType
      description: The type classification for this successful result. Defaults to <xref href="FlowRight.Core.Results.ResultType.Success" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: The type of the success value.
    return:
      type: FlowRight.Core.Results.Result{{T}}
      description: A successful <xref href="FlowRight.Core.Results.Result%601" data-throw-if-not-resolved="false"></xref> instance containing the specified value, including null values.
    content.vb: Public Shared Function SuccessOrNull(Of T)(value As T, resultType As ResultType = ResultType.Success) As Result(Of T)
  overload: FlowRight.Core.Results.Result.SuccessOrNull*
  nameWithType.vb: Result.SuccessOrNull(Of T)(T, ResultType)
  fullName.vb: FlowRight.Core.Results.Result.SuccessOrNull(Of T)(T, FlowRight.Core.Results.ResultType)
  name.vb: SuccessOrNull(Of T)(T, ResultType)
references:
- uid: FlowRight.Core.Results
  commentId: N:FlowRight.Core.Results
  href: FlowRight.html
  name: FlowRight.Core.Results
  nameWithType: FlowRight.Core.Results
  fullName: FlowRight.Core.Results
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Results
    name: Results
    href: FlowRight.Core.Results.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: FlowRight.Core.Results.IResult
  commentId: T:FlowRight.Core.Results.IResult
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.IResult.html
  name: IResult
  nameWithType: IResult
  fullName: FlowRight.Core.Results.IResult
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  name: MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<TResult>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of TResult)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{{TResult}}},System.Func{System.String,System.Threading.Tasks.Task{{TResult}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  name: MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<TResult>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of TResult)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  name: SwitchAsync(Result, Func<Task>, Func<string, Task>, bool)
  nameWithType: ResultAsyncExtensions.SwitchAsync(Result, Func<Task>, Func<string, Task>, bool)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, bool)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Boolean)
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), Boolean)
  name.vb: SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  name: SwitchAsync(Result, Func<Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  nameWithType: ResultAsyncExtensions.SwitchAsync(Result, Func<Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task))
  name.vb: SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  name: ThenAsync(Result, Func<Task<Result>>)
  nameWithType: ResultAsyncExtensions.ThenAsync(Result, Func<Task<Result>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<FlowRight.Core.Results.Result>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Result, Func(Of Task(Of Result)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result)))
  name.vb: ThenAsync(Result, Func(Of Task(Of Result)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{{T}}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
  parent: FlowRight.Core.Extensions.ResultAsyncExtensions
  definition: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  name: ThenAsync<T>(Result, Func<Task<Result<T>>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T>(Result, Func<Task<Result<T>>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<FlowRight.Core.Results.Result<T>>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T)(Result, Func(Of Task(Of Result(Of T))))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result(Of T))))
  name.vb: ThenAsync(Of T)(Result, Func(Of Task(Of Result(Of T))))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  name: MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<TResult>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of TResult)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions
  commentId: T:FlowRight.Core.Extensions.ResultAsyncExtensions
  parent: FlowRight.Core.Extensions
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html
  name: ResultAsyncExtensions
  nameWithType: ResultAsyncExtensions
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  name: MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  nameWithType: ResultAsyncExtensions.MatchAsync<TResult>(Result, Func<Task<TResult>>, Func<string, Task<TResult>>, Func<string, Task<TResult>>, Func<IDictionary<string, string[]>, Task<TResult>>, Func<string, Task<TResult>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync<TResult>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task<TResult>>, System.Func<string, System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ResultAsyncExtensions.MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync(Of TResult)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task(Of TResult)), System.Func(Of String, System.Threading.Tasks.Task(Of TResult)))
  name.vb: MatchAsync(Of TResult)(Result, Func(Of Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of String, Task(Of TResult)), Func(Of IDictionary(Of String, String()), Task(Of TResult)), Func(Of String, Task(Of TResult)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.MatchAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task{``0}},System.Func{System.String,System.Threading.Tasks.Task{``0}})
    name: MatchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_MatchAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task___0___System_Func_System_String_System_Threading_Tasks_Task___0___
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  name: SwitchAsync(Result, Func<Task>, Func<string, Task>, bool)
  nameWithType: ResultAsyncExtensions.SwitchAsync(Result, Func<Task>, Func<string, Task>, bool)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, bool)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Boolean)
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), Boolean)
  name.vb: SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Boolean)
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Boolean)
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Boolean_
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  name: SwitchAsync(Result, Func<Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  nameWithType: ResultAsyncExtensions.SwitchAsync(Result, Func<Task>, Func<string, Task>, Func<string, Task>, Func<IDictionary<string, string[]>, Task>, Func<string, Task>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>, System.Func<System.Collections.Generic.IDictionary<string, string[]>, System.Threading.Tasks.Task>, System.Func<string, System.Threading.Tasks.Task>)
  nameWithType.vb: ResultAsyncExtensions.SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), System.Threading.Tasks.Task), System.Func(Of String, System.Threading.Tasks.Task))
  name.vb: SwitchAsync(Result, Func(Of Task), Func(Of String, Task), Func(Of String, Task), Func(Of IDictionary(Of String, String()), Task), Func(Of String, Task))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.SwitchAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})
    name: SwitchAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_SwitchAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__System_Func_System_Collections_Generic_IDictionary_System_String_System_String____System_Threading_Tasks_Task__System_Func_System_String_System_Threading_Tasks_Task__
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  name: ThenAsync(Result, Func<Task<Result>>)
  nameWithType: ResultAsyncExtensions.ThenAsync(Result, Func<Task<Result>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<FlowRight.Core.Results.Result>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Result, Func(Of Task(Of Result)))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result)))
  name.vb: ThenAsync(Result, Func(Of Task(Of Result)))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
  commentId: M:FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
  isExternal: true
  href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  name: ThenAsync<T>(Result, Func<Task<Result<T>>>)
  nameWithType: ResultAsyncExtensions.ThenAsync<T>(Result, Func<Task<Result<T>>>)
  fullName: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync<T>(FlowRight.Core.Results.Result, System.Func<System.Threading.Tasks.Task<FlowRight.Core.Results.Result<T>>>)
  nameWithType.vb: ResultAsyncExtensions.ThenAsync(Of T)(Result, Func(Of Task(Of Result(Of T))))
  fullName.vb: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync(Of T)(FlowRight.Core.Results.Result, System.Func(Of System.Threading.Tasks.Task(Of FlowRight.Core.Results.Result(Of T))))
  name.vb: ThenAsync(Of T)(Result, Func(Of Task(Of Result(Of T))))
  spec.csharp:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Extensions.ResultAsyncExtensions.ThenAsync``1(FlowRight.Core.Results.Result,System.Func{System.Threading.Tasks.Task{FlowRight.Core.Results.Result{``0}}})
    name: ThenAsync
    href: FlowRight.Core.Extensions.ResultAsyncExtensions.html#FlowRight_Core_Extensions_ResultAsyncExtensions_ThenAsync__1_FlowRight_Core_Results_Result_System_Func_System_Threading_Tasks_Task_FlowRight_Core_Results_Result___0____
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: ','
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Extensions
  commentId: N:FlowRight.Core.Extensions
  href: FlowRight.html
  name: FlowRight.Core.Extensions
  nameWithType: FlowRight.Core.Extensions
  fullName: FlowRight.Core.Extensions
  spec.csharp:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Extensions
    name: Extensions
    href: FlowRight.Core.Extensions.html
  spec.vb:
  - uid: FlowRight
    name: FlowRight
    href: FlowRight.html
  - name: .
  - uid: FlowRight.Core
    name: Core
    href: FlowRight.Core.html
  - name: .
  - uid: FlowRight.Core.Extensions
    name: Extensions
    href: FlowRight.Core.Extensions.html
- uid: FlowRight.Core.Results.ResultType.Error
  commentId: F:FlowRight.Core.Results.ResultType.Error
  href: FlowRight.Core.Results.ResultType.html#FlowRight_Core_Results_ResultType_Error
  name: Error
  nameWithType: ResultType.Error
  fullName: FlowRight.Core.Results.ResultType.Error
- uid: FlowRight.Core.Results.ResultFailureType.Error
  commentId: F:FlowRight.Core.Results.ResultFailureType.Error
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Error
  name: Error
  nameWithType: ResultFailureType.Error
  fullName: FlowRight.Core.Results.ResultFailureType.Error
- uid: FlowRight.Core.Results.Result
  commentId: T:FlowRight.Core.Results.Result
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.Result.html
  name: Result
  nameWithType: Result
  fullName: FlowRight.Core.Results.Result
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: FlowRight.Core.Results.Result.Failure*
  commentId: Overload:FlowRight.Core.Results.Result.Failure
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure_System_String_FlowRight_Core_Results_ResultType_FlowRight_Core_Results_ResultFailureType_
  name: Failure
  nameWithType: Result.Failure
  fullName: FlowRight.Core.Results.Result.Failure
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: FlowRight.Core.Results.ResultType
  commentId: T:FlowRight.Core.Results.ResultType
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.ResultType.html
  name: ResultType
  nameWithType: ResultType
  fullName: FlowRight.Core.Results.ResultType
- uid: FlowRight.Core.Results.ResultFailureType
  commentId: T:FlowRight.Core.Results.ResultFailureType
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.ResultFailureType.html
  name: ResultFailureType
  nameWithType: ResultFailureType
  fullName: FlowRight.Core.Results.ResultFailureType
- uid: FlowRight.Core.Results.ResultFailureType.Validation
  commentId: F:FlowRight.Core.Results.ResultFailureType.Validation
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Validation
  name: Validation
  nameWithType: ResultFailureType.Validation
  fullName: FlowRight.Core.Results.ResultFailureType.Validation
- uid: FlowRight.Core.Results.Result.FailureType
  commentId: P:FlowRight.Core.Results.Result.FailureType
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_FailureType
  name: FailureType
  nameWithType: Result.FailureType
  fullName: FlowRight.Core.Results.Result.FailureType
- uid: FlowRight.Core.Results.Result.Failures
  commentId: P:FlowRight.Core.Results.Result.Failures
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failures
  name: Failures
  nameWithType: Result.Failures
  fullName: FlowRight.Core.Results.Result.Failures
- uid: FlowRight.Core.Results.ResultFailureType.Security
  commentId: F:FlowRight.Core.Results.ResultFailureType.Security
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_Security
  name: Security
  nameWithType: ResultFailureType.Security
  fullName: FlowRight.Core.Results.ResultFailureType.Security
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  parent: System.Security
  isExternal: true
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.Security
  commentId: N:System.Security
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Security
    name: Security
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.security
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Security
    name: Security
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.security
- uid: FlowRight.Core.Results.ResultFailureType.OperationCanceled
  commentId: F:FlowRight.Core.Results.ResultFailureType.OperationCanceled
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_OperationCanceled
  name: OperationCanceled
  nameWithType: ResultFailureType.OperationCanceled
  fullName: FlowRight.Core.Results.ResultFailureType.OperationCanceled
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  parent: System
  isExternal: true
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: FlowRight.Core.Results.Result.ResultType
  commentId: P:FlowRight.Core.Results.Result.ResultType
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_ResultType
  name: ResultType
  nameWithType: Result.ResultType
  fullName: FlowRight.Core.Results.Result.ResultType
- uid: FlowRight.Core.Results.ResultType.Warning
  commentId: F:FlowRight.Core.Results.ResultType.Warning
  href: FlowRight.Core.Results.ResultType.html#FlowRight_Core_Results_ResultType_Warning
  name: Warning
  nameWithType: ResultType.Warning
  fullName: FlowRight.Core.Results.ResultType.Warning
- uid: System.Collections.Generic.IDictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<string, string[]>
  nameWithType: IDictionary<string, string[]>
  fullName: System.Collections.Generic.IDictionary<string, string[]>
  nameWithType.vb: IDictionary(Of String, String())
  fullName.vb: System.Collections.Generic.IDictionary(Of String, String())
  name.vb: IDictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: FlowRight.Core.Results.Result`1
  commentId: T:FlowRight.Core.Results.Result`1
  parent: FlowRight.Core.Results
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.Result{{T}}
  commentId: T:FlowRight.Core.Results.Result{`0}
  parent: FlowRight.Core.Results
  definition: FlowRight.Core.Results.Result`1
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>
  nameWithType: Result<T>
  fullName: FlowRight.Core.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: FlowRight.Core.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FlowRight.Core.Results.ResultFailureType.NotFound
  commentId: F:FlowRight.Core.Results.ResultFailureType.NotFound
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_NotFound
  name: NotFound
  nameWithType: ResultFailureType.NotFound
  fullName: FlowRight.Core.Results.ResultFailureType.NotFound
- uid: FlowRight.Core.Results.Result.NotFound*
  commentId: Overload:FlowRight.Core.Results.Result.NotFound
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_NotFound_System_String_
  name: NotFound
  nameWithType: Result.NotFound
  fullName: FlowRight.Core.Results.Result.NotFound
- uid: FlowRight.Core.Results.ResultFailureType.ServerError
  commentId: F:FlowRight.Core.Results.ResultFailureType.ServerError
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_ServerError
  name: ServerError
  nameWithType: ResultFailureType.ServerError
  fullName: FlowRight.Core.Results.ResultFailureType.ServerError
- uid: FlowRight.Core.Results.Result.ServerError*
  commentId: Overload:FlowRight.Core.Results.Result.ServerError
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_ServerError_System_String_
  name: ServerError
  nameWithType: Result.ServerError
  fullName: FlowRight.Core.Results.Result.ServerError
- uid: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
  isExternal: true
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure_System_Collections_Generic_IDictionary_System_String_System_String____
  name: Failure(IDictionary<string, string[]>)
  nameWithType: Result.Failure(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary<string, string[]>)
  nameWithType.vb: Result.Failure(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Failure(IDictionary(Of String, String()))
  spec.csharp:
  - uid: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
    name: Failure
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure_System_Collections_Generic_IDictionary_System_String_System_String____
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result.Failure(System.Collections.Generic.IDictionary{System.String,System.String[]})
    name: Failure
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure_System_Collections_Generic_IDictionary_System_String_System_String____
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.ValidationFailure*
  commentId: Overload:FlowRight.Core.Results.Result.ValidationFailure
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_ValidationFailure_System_Collections_Generic_IDictionary_System_String_System_String____
  name: ValidationFailure
  nameWithType: Result.ValidationFailure
  fullName: FlowRight.Core.Results.Result.ValidationFailure
- uid: FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  commentId: M:FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
  isExternal: true
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure__1_System_Collections_Generic_IDictionary_System_String_System_String____
  name: Failure<T>(IDictionary<string, string[]>)
  nameWithType: Result.Failure<T>(IDictionary<string, string[]>)
  fullName: FlowRight.Core.Results.Result.Failure<T>(System.Collections.Generic.IDictionary<string, string[]>)
  nameWithType.vb: Result.Failure(Of T)(IDictionary(Of String, String()))
  fullName.vb: FlowRight.Core.Results.Result.Failure(Of T)(System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Failure(Of T)(IDictionary(Of String, String()))
  spec.csharp:
  - uid: FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
    name: Failure
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure__1_System_Collections_Generic_IDictionary_System_String_System_String____
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result.Failure``1(System.Collections.Generic.IDictionary{System.String,System.String[]})
    name: Failure
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failure__1_System_Collections_Generic_IDictionary_System_String_System_String____
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.Combine*
  commentId: Overload:FlowRight.Core.Results.Result.Combine
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Combine_FlowRight_Core_Results_Result___
  name: Combine
  nameWithType: Result.Combine
  fullName: FlowRight.Core.Results.Result.Combine
- uid: FlowRight.Core.Results.Result[]
  isExternal: true
  href: FlowRight.Core.Results.Result.html
  name: Result[]
  nameWithType: Result[]
  fullName: FlowRight.Core.Results.Result[]
  nameWithType.vb: Result()
  fullName.vb: FlowRight.Core.Results.Result()
  name.vb: Result()
  spec.csharp:
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: FlowRight.Core.Results.Result
    name: Result
    href: FlowRight.Core.Results.Result.html
  - name: (
  - name: )
- uid: FlowRight.Core.Results.Result{{T}}[]
  isExternal: true
  href: FlowRight.Core.Results.Result-1.html
  name: Result<T>[]
  nameWithType: Result<T>[]
  fullName: FlowRight.Core.Results.Result<T>[]
  nameWithType.vb: Result(Of T)()
  fullName.vb: FlowRight.Core.Results.Result(Of T)()
  name.vb: Result(Of T)()
  spec.csharp:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: FlowRight.Core.Results.Result`1
    name: Result
    href: FlowRight.Core.Results.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: FlowRight.Core.Results.Result.Match*
  commentId: Overload:FlowRight.Core.Results.Result.Match
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Match__1_System_Func___0__System_Func_System_String___0__
  name: Match
  nameWithType: Result.Match
  fullName: FlowRight.Core.Results.Result.Match
- uid: System.Func{{TResult}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.String,{TResult}}
  commentId: T:System.Func{System.String,``0}
  parent: System
  definition: System.Func`2
  name: Func<string, TResult>
  nameWithType: Func<string, TResult>
  fullName: System.Func<string, TResult>
  nameWithType.vb: Func(Of String, TResult)
  fullName.vb: System.Func(Of String, TResult)
  name.vb: Func(Of String, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},{TResult}}
  commentId: T:System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},``0}
  parent: System
  definition: System.Func`2
  name: Func<IDictionary<string, string[]>, TResult>
  nameWithType: Func<IDictionary<string, string[]>, TResult>
  fullName: System.Func<System.Collections.Generic.IDictionary<string, string[]>, TResult>
  nameWithType.vb: Func(Of IDictionary(Of String, String()), TResult)
  fullName.vb: System.Func(Of System.Collections.Generic.IDictionary(Of String, String()), TResult)
  name.vb: Func(Of IDictionary(Of String, String()), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
  commentId: M:FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
  isExternal: true
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Match__1_System_Func___0__System_Func_System_String___0__
  name: Match<TResult>(Func<TResult>, Func<string, TResult>)
  nameWithType: Result.Match<TResult>(Func<TResult>, Func<string, TResult>)
  fullName: FlowRight.Core.Results.Result.Match<TResult>(System.Func<TResult>, System.Func<string, TResult>)
  nameWithType.vb: Result.Match(Of TResult)(Func(Of TResult), Func(Of String, TResult))
  fullName.vb: FlowRight.Core.Results.Result.Match(Of TResult)(System.Func(Of TResult), System.Func(Of String, TResult))
  name.vb: Match(Of TResult)(Func(Of TResult), Func(Of String, TResult))
  spec.csharp:
  - uid: FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Match__1_System_Func___0__System_Func_System_String___0__
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result.Match``1(System.Func{``0},System.Func{System.String,``0})
    name: Match
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Match__1_System_Func___0__System_Func_System_String___0__
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.Switch*
  commentId: Overload:FlowRight.Core.Results.Result.Switch
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Switch_System_Action_System_Action_System_String__System_Boolean_
  name: Switch
  nameWithType: Result.Switch
  fullName: FlowRight.Core.Results.Result.Switch
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
  commentId: T:System.Action{System.Collections.Generic.IDictionary{System.String,System.String[]}}
  parent: System
  definition: System.Action`1
  name: Action<IDictionary<string, string[]>>
  nameWithType: Action<IDictionary<string, string[]>>
  fullName: System.Action<System.Collections.Generic.IDictionary<string, string[]>>
  nameWithType.vb: Action(Of IDictionary(Of String, String()))
  fullName.vb: System.Action(Of System.Collections.Generic.IDictionary(Of String, String()))
  name.vb: Action(Of IDictionary(Of String, String()))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: FlowRight.Core.Results.Result.op_Explicit*
  commentId: Overload:FlowRight.Core.Results.Result.op_Explicit
  name: explicit operator
  nameWithType: Result.explicit operator
  fullName: FlowRight.Core.Results.Result.explicit operator
  nameWithType.vb: Result.CType
  fullName.vb: FlowRight.Core.Results.Result.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: FlowRight.Core.Results.IResultError`1.Error
  commentId: P:FlowRight.Core.Results.IResultError`1.Error
  href: FlowRight.Core.Results.IResultError-1.html#FlowRight_Core_Results_IResultError_1_Error
  name: Error
  nameWithType: IResultError<T>.Error
  fullName: FlowRight.Core.Results.IResultError<T>.Error
  nameWithType.vb: IResultError(Of T).Error
  fullName.vb: FlowRight.Core.Results.IResultError(Of T).Error
- uid: FlowRight.Core.Results.Result.Error*
  commentId: Overload:FlowRight.Core.Results.Result.Error
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Error
  name: Error
  nameWithType: Result.Error
  fullName: FlowRight.Core.Results.Result.Error
- uid: FlowRight.Core.Results.Result.Failures*
  commentId: Overload:FlowRight.Core.Results.Result.Failures
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Failures
  name: Failures
  nameWithType: Result.Failures
  fullName: FlowRight.Core.Results.Result.Failures
- uid: FlowRight.Core.Results.IResult.Failures
  commentId: P:FlowRight.Core.Results.IResult.Failures
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_Failures
  name: Failures
  nameWithType: IResult.Failures
  fullName: FlowRight.Core.Results.IResult.Failures
- uid: FlowRight.Core.Results.ResultFailureType.None
  commentId: F:FlowRight.Core.Results.ResultFailureType.None
  href: FlowRight.Core.Results.ResultFailureType.html#FlowRight_Core_Results_ResultFailureType_None
  name: None
  nameWithType: ResultFailureType.None
  fullName: FlowRight.Core.Results.ResultFailureType.None
- uid: FlowRight.Core.Results.Result.FailureType*
  commentId: Overload:FlowRight.Core.Results.Result.FailureType
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_FailureType
  name: FailureType
  nameWithType: Result.FailureType
  fullName: FlowRight.Core.Results.Result.FailureType
- uid: FlowRight.Core.Results.IResult.FailureType
  commentId: P:FlowRight.Core.Results.IResult.FailureType
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_FailureType
  name: FailureType
  nameWithType: IResult.FailureType
  fullName: FlowRight.Core.Results.IResult.FailureType
- uid: FlowRight.Core.Results.Result.IsSuccess
  commentId: P:FlowRight.Core.Results.Result.IsSuccess
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_IsSuccess
  name: IsSuccess
  nameWithType: Result.IsSuccess
  fullName: FlowRight.Core.Results.Result.IsSuccess
- uid: FlowRight.Core.Results.Result.IsFailure*
  commentId: Overload:FlowRight.Core.Results.Result.IsFailure
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_IsFailure
  name: IsFailure
  nameWithType: Result.IsFailure
  fullName: FlowRight.Core.Results.Result.IsFailure
- uid: FlowRight.Core.Results.IResult.IsFailure
  commentId: P:FlowRight.Core.Results.IResult.IsFailure
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_IsFailure
  name: IsFailure
  nameWithType: IResult.IsFailure
  fullName: FlowRight.Core.Results.IResult.IsFailure
- uid: FlowRight.Core.Results.Result.IsFailure
  commentId: P:FlowRight.Core.Results.Result.IsFailure
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_IsFailure
  name: IsFailure
  nameWithType: Result.IsFailure
  fullName: FlowRight.Core.Results.Result.IsFailure
- uid: FlowRight.Core.Results.Result.IsSuccess*
  commentId: Overload:FlowRight.Core.Results.Result.IsSuccess
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_IsSuccess
  name: IsSuccess
  nameWithType: Result.IsSuccess
  fullName: FlowRight.Core.Results.Result.IsSuccess
- uid: FlowRight.Core.Results.IResult.IsSuccess
  commentId: P:FlowRight.Core.Results.IResult.IsSuccess
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_IsSuccess
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: FlowRight.Core.Results.IResult.IsSuccess
- uid: FlowRight.Core.Results.Result.ResultType*
  commentId: Overload:FlowRight.Core.Results.Result.ResultType
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_ResultType
  name: ResultType
  nameWithType: Result.ResultType
  fullName: FlowRight.Core.Results.Result.ResultType
- uid: FlowRight.Core.Results.IResult.ResultType
  commentId: P:FlowRight.Core.Results.IResult.ResultType
  parent: FlowRight.Core.Results.IResult
  href: FlowRight.Core.Results.IResult.html#FlowRight_Core_Results_IResult_ResultType
  name: ResultType
  nameWithType: IResult.ResultType
  fullName: FlowRight.Core.Results.IResult.ResultType
- uid: FlowRight.Core.Results.ResultType.Success
  commentId: F:FlowRight.Core.Results.ResultType.Success
  href: FlowRight.Core.Results.ResultType.html#FlowRight_Core_Results_ResultType_Success
  name: Success
  nameWithType: ResultType.Success
  fullName: FlowRight.Core.Results.ResultType.Success
- uid: FlowRight.Core.Results.Result.Success*
  commentId: Overload:FlowRight.Core.Results.Result.Success
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success_FlowRight_Core_Results_ResultType_
  name: Success
  nameWithType: Result.Success
  fullName: FlowRight.Core.Results.Result.Success
- uid: FlowRight.Core.Results.ResultType.Information
  commentId: F:FlowRight.Core.Results.ResultType.Information
  href: FlowRight.Core.Results.ResultType.html#FlowRight_Core_Results_ResultType_Information
  name: Information
  nameWithType: ResultType.Information
  fullName: FlowRight.Core.Results.ResultType.Information
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  commentId: M:FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  name: Success<T>(T, ResultType)
  nameWithType: Result.Success<T>(T, ResultType)
  fullName: FlowRight.Core.Results.Result.Success<T>(T, FlowRight.Core.Results.ResultType)
  nameWithType.vb: Result.Success(Of T)(T, ResultType)
  fullName.vb: FlowRight.Core.Results.Result.Success(Of T)(T, FlowRight.Core.Results.ResultType)
  name.vb: Success(Of T)(T, ResultType)
  spec.csharp:
  - uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
    name: Success
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: FlowRight.Core.Results.ResultType
    name: ResultType
    href: FlowRight.Core.Results.ResultType.html
  - name: )
  spec.vb:
  - uid: FlowRight.Core.Results.Result.Success``1(``0,FlowRight.Core.Results.ResultType)
    name: Success
    href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_Success__1___0_FlowRight_Core_Results_ResultType_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: FlowRight.Core.Results.ResultType
    name: ResultType
    href: FlowRight.Core.Results.ResultType.html
  - name: )
- uid: FlowRight.Core.Results.Result.SuccessOrNull*
  commentId: Overload:FlowRight.Core.Results.Result.SuccessOrNull
  href: FlowRight.Core.Results.Result.html#FlowRight_Core_Results_Result_SuccessOrNull__1___0_FlowRight_Core_Results_ResultType_
  name: SuccessOrNull
  nameWithType: Result.SuccessOrNull
  fullName: FlowRight.Core.Results.Result.SuccessOrNull
