using System.Text.Json.Serialization;

namespace FlowRight.Http.Models;

/// <summary>
/// Represents a validation problem response that follows RFC 7807 Problem Details specification
/// and contains field-specific error messages.
/// </summary>
/// <remarks>
/// <para>
/// This class is designed to be fully compatible with ASP.NET Core's ValidationProblemDetails
/// and provides serialization support for error responses from HTTP APIs following the
/// RFC 7807 standard for Problem Details for HTTP APIs.
/// </para>
/// <para>
/// The class includes all standard RFC 7807 properties (type, title, status, detail, instance)
/// plus the validation-specific errors dictionary. This ensures compatibility with both
/// minimal error responses containing only the errors property and full RFC 7807 compliant
/// responses from ASP.NET Core APIs.
/// </para>
/// </remarks>
public sealed class ValidationProblemResponse
{
    #region Public Properties

    /// <summary>
    /// Gets or sets a URI reference that identifies the problem type.
    /// </summary>
    /// <value>
    /// A URI that identifies the problem type. When absent, it defaults to "about:blank".
    /// </value>
    /// <example>
    /// <code>
    /// Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1"
    /// </code>
    /// </example>
    [JsonPropertyName("type")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Type { get; set; }

    /// <summary>
    /// Gets or sets a short, human-readable summary of the problem type.
    /// </summary>
    /// <value>
    /// A human-readable summary of the problem type. This should not change between
    /// occurrences of the problem, except for purposes of localization.
    /// </value>
    /// <example>
    /// <code>
    /// Title = "One or more validation errors occurred."
    /// </code>
    /// </example>
    [JsonPropertyName("title")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }

    /// <summary>
    /// Gets or sets the HTTP status code generated by the origin server for this occurrence of the problem.
    /// </summary>
    /// <value>
    /// The HTTP status code for this problem. When present, it should match the status code
    /// used in the HTTP response.
    /// </value>
    /// <example>
    /// <code>
    /// Status = 400
    /// </code>
    /// </example>
    [JsonPropertyName("status")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Status { get; set; }

    /// <summary>
    /// Gets or sets a human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    /// <value>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// This should focus on helping the client correct the problem.
    /// </value>
    /// <example>
    /// <code>
    /// Detail = "The request failed validation. See errors for details."
    /// </code>
    /// </example>
    [JsonPropertyName("detail")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Detail { get; set; }

    /// <summary>
    /// Gets or sets a URI reference that identifies the specific occurrence of the problem.
    /// </summary>
    /// <value>
    /// A URI that identifies the specific occurrence of the problem. This can be used
    /// to provide a reference to a specific request or operation.
    /// </value>
    /// <example>
    /// <code>
    /// Instance = "/api/users/validation-error/12345"
    /// </code>
    /// </example>
    [JsonPropertyName("instance")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Instance { get; set; }

    /// <summary>
    /// Gets or sets the dictionary of validation errors keyed by field name.
    /// </summary>
    /// <value>
    /// A dictionary where keys are field names and values are arrays of error messages for that field.
    /// This property is specific to validation problems and extends the base RFC 7807 structure.
    /// </value>
    /// <example>
    /// <code>
    /// ValidationProblemResponse response = new()
    /// {
    ///     Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1",
    ///     Title = "One or more validation errors occurred.",
    ///     Status = 400,
    ///     Errors = new Dictionary&lt;string, string[]&gt;
    ///     {
    ///         { "Email", ["Email is required", "Email format is invalid"] },
    ///         { "Name", ["Name is required"] }
    ///     }
    /// };
    /// </code>
    /// </example>
    [JsonPropertyName("errors")]
    public Dictionary<string, string[]> Errors { get; set; } = [];

    #endregion Public Properties
}